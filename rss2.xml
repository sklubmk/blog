<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>JK&#39;s Devlog</title>
    <link>https://sklubmk.github.io/</link>
    
    <atom:link href="https://sklubmk.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Sun, 18 Jul 2021 09:15:03 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>[프로그래머스] 전화번호 목록</title>
      <link>https://sklubmk.github.io/2021/07/18/aaa5a088c75a/</link>
      <guid>https://sklubmk.github.io/2021/07/18/aaa5a088c75a/</guid>
      <pubDate>Sun, 18 Jul 2021 07:49:07 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;전화번호-목록&quot;&gt;&lt;a href=&quot;#전화번호-목록&quot; class=&quot;headerlink&quot; title=&quot;전화번호 목록&quot;&gt;&lt;/a&gt;전화번호 목록&lt;/h1&gt;&lt;p&gt;Python3&lt;/p&gt;
&lt;blockquote&gt;
&lt;h6 id=&quot;문제-설명&quot;&gt;&lt;a href=&quot;#</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="전화번호-목록"><a href="#전화번호-목록" class="headerlink" title="전화번호 목록"></a>전화번호 목록</h1><p>Python3</p><blockquote><h6 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h6><p>전화번호부에 적힌 전화번호 중, 한 번호가 다른 번호의 접두어인 경우가 있는지 확인하려 합니다.<br>전화번호가 다음과 같을 경우, 구조대 전화번호는 영석이의 전화번호의 접두사입니다.</p><ul><li>  구조대 : 119</li><li>  박준영 : 97 674 223</li><li>  지영석 : 11 9552 4421</li></ul><p>전화번호부에 적힌 전화번호를 담은 배열 phone_book 이 solution 함수의 매개변수로 주어질 때, 어떤 번호가 다른 번호의 접두어인 경우가 있으면 false를 그렇지 않으면 true를 return 하도록 solution 함수를 작성해주세요.</p><h5 id="제한-사항"><a href="#제한-사항" class="headerlink" title="제한 사항"></a>제한 사항</h5><ul><li>phone_book의 길이는 1 이상 1,000,000 이하입니다.<ul><li>  각 전화번호의 길이는 1 이상 20 이하입니다.</li><li>  같은 전화번호가 중복해서 들어있지 않습니다.</li></ul></li></ul><h5 id="입출력-예제"><a href="#입출력-예제" class="headerlink" title="입출력 예제"></a>입출력 예제</h5><table><thead><tr><th>phone_book</th><th>return</th></tr></thead><tbody><tr><td>[“119”, “97674223”, “1195524421”]</td><td>false</td></tr><tr><td>[“123”,”456”,”789”]</td><td>true</td></tr><tr><td>[“12”,”123”,”1235”,”567”,”88”]</td><td>false</td></tr></tbody></table><h5 id="입출력-예-설명"><a href="#입출력-예-설명" class="headerlink" title="입출력 예 설명"></a>입출력 예 설명</h5><p>입출력 예 #1<br>앞에서 설명한 예와 같습니다.</p><p>입출력 예 #2<br>한 번호가 다른 번호의 접두사인 경우가 없으므로, 답은 true입니다.</p><p>입출력 예 #3<br>첫 번째 전화번호, “12”가 두 번째 전화번호 “123”의 접두사입니다. 따라서 답은 false입니다.</p><hr><p>알림</p><p>2021년 3월 4일, 테스트 케이스가 변경되었습니다. 이로 인해 이전에 통과하던 코드가 더 이상 통과하지 않을 수 있습니다.</p><p><a href="https://ncpc.idi.ntnu.no/ncpc2007/ncpc2007problems.pdf">출처</a></p></blockquote><br/><br/><h1 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h1><br/><h4 id="python"><a href="#python" class="headerlink" title="python"></a>python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span>(<span class="params">phone_book</span>):</span></span><br><span class="line">    phone_book.sort()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(phone_book)):</span><br><span class="line">        <span class="keyword">if</span> phone_book[i].find(phone_book[i-<span class="number">1</span>]) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><br/><br/><h1 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h1><br/><p>해시 카테고리의 문제이나, 언뜻 생각할 수 있는 풀이 방법은 다양하다.</p><br/><p>그러나 문제의 제한사항에서 phone_book의 길이가 최대 100만이므로, $O(N^2)$ 이상은 효율성에서 실패할 것이다. 그러므로 최소 $O(NlogN)$의 효율성을 보이는 풀이가 필요하다.</p><br/><p>hash를 이용해서도 문제를 풀 수 있다.  한 번의 반복문으로 모든 번호를 hash에 넣고, 다시 한 번 배열을 돌며 각 번호의 부분집합이 dict에 포함되어있는지 비교하면 된다. 전화번호의 길이가 최대 20이므로, 총 계산은 $O(21N)$이 되는데, 이는 사실상 O(N)이므로 풀이에 쉽게 통과된다.</p><br/><p>그러나 가장 간단한 풀이는, 위 코드처럼 번호를 ‘문자’를 기준으로 정렬했을 때다. 이때 접두사가 포함된 문자는 반드시 접두사 문자 바로 뒤에 정렬되기 때문에 간단히 O(N) 비용으로 문제를 풀 수 있다.</p>]]></content:encoded>
      
      
      <category domain="https://sklubmk.github.io/categories/TIL/">TIL</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/">프로그래머스</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/lv2/">lv2</category>
      
      
      <category domain="https://sklubmk.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sklubmk.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://sklubmk.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/">프로그래머스</category>
      
      <category domain="https://sklubmk.github.io/tags/python/">python</category>
      
      <category domain="https://sklubmk.github.io/tags/lv2/">lv2</category>
      
      <category domain="https://sklubmk.github.io/tags/hash/">hash</category>
      
      
      <comments>https://sklubmk.github.io/2021/07/18/aaa5a088c75a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[프로그래머스] 미로 탈출</title>
      <link>https://sklubmk.github.io/2021/07/15/83cac01aa64b/</link>
      <guid>https://sklubmk.github.io/2021/07/15/83cac01aa64b/</guid>
      <pubDate>Thu, 15 Jul 2021 06:10:59 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;미로-탈출&quot;&gt;&lt;a href=&quot;#미로-탈출&quot; class=&quot;headerlink&quot; title=&quot;미로 탈출&quot;&gt;&lt;/a&gt;미로 탈출&lt;/h1&gt;&lt;p&gt;Python3&lt;/p&gt;
&lt;blockquote&gt;
&lt;h6 id=&quot;문제-설명&quot;&gt;&lt;a href=&quot;#문제-설명&quot; c</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="미로-탈출"><a href="#미로-탈출" class="headerlink" title="미로 탈출"></a>미로 탈출</h1><p>Python3</p><blockquote><h6 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h6><p>신규 게임 ‘카카오 미로 탈출’이 출시되어, <code>라이언</code>이 베타테스터로 참가했습니다.</p><p><img src="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/0015adcc-d76e-40e3-8004-70dd8deff2ec/Maze.png" alt="Maze.png"></p><p>위 예시 그림은 카카오 미로 탈출의 초기 상태를 나타냅니다. 1번부터 3번까지 번호가 붙어있는 3개의 방이 있고, 방과 방 사이를 연결하는 길에는 이동하는데 걸리는 시간이 표시되어 있습니다. 길은 화살표가 가리키는 방향으로만 이동할 수 있습니다. 미로에는 함정이 존재하며, 함정으로 이동하면, 이동한 함정과 연결된 모든 화살표의 방향이 바뀝니다.<br>출발지점인 <code>1</code>번 방에서 탈출이 가능한 <code>3</code>번 방까지 이동해야 합니다. 탈출하는데 걸리는 최소 시간을 구하려고 합니다.</p><ul><li>그림의 원은 방을 나타내며 원 안의 숫자는 방 번호를 나타냅니다.<ul><li>  방이 <code>n</code>개일 때, 방 번호는 1부터 <code>n</code>까지 사용됩니다.</li></ul></li><li>화살표에 표시된 숫자는 방과 방 사이를 이동할 때 걸리는 시간을 나타냅니다.<ul><li>  화살표가 가리키고 있는 방향으로만 이동이 가능합니다. 즉, 위 그림에서 2번 방에서 1번 방으로는 이동할 수 없습니다.</li></ul></li><li>그림에 표시된 빨간색 방인 <code>2</code>번 방은 함정입니다.<ul><li>  함정 방으로 이동하는 순간, 이동한 함정 방과 연결되어있는 모든 길의 방향이 반대가 됩니다.</li><li>  위 그림 <code>1</code>번 방에서 <code>2</code>번 방으로 이동하는 순간 <code>1</code>에서 <code>2</code>로 이동할 수 있던 길은 <code>2</code>에서 <code>1</code>로 이동할 수 있는 길로 바뀌고, <code>3</code>에서 <code>2</code>로 이동할 수 있던 길은 <code>2</code>에서 <code>3</code>으로 이동할 수 있는 길로 바뀝니다.</li><li>  똑같은 함정 방을 두 번째 방문하게 되면 원래 방향의 길로 돌아옵니다. 즉, 여러 번 방문하여 계속 길의 방향을 반대로 뒤집을 수 있습니다.</li></ul></li><li>미로를 탈출하는데 필요한 최단 시간은 다음과 같습니다.<ul><li>  1→2: 2번 방으로 이동합니다. 이동 시간은 2입니다.</li><li>  함정 발동: 2번 방과 연결된 모든 길의 방향이 반대가 됩니다.</li><li>  2→3: 3번 방으로 이동합니다. 이동 시간은 3입니다.</li><li>  탈출에 성공했습니다. 총 이동시간은 5입니다.</li></ul></li></ul><p>방의 개수를 나타내는 정수 <code>n</code>, 출발 방의 번호 <code>start</code>, 도착 방의 번호 <code>end</code>, 통로와 이동시간을 나타내는 2차원 정수 배열 <code>roads</code>, 함정 방의 번호를 담은 정수 배열 <code>traps</code>이 매개변수로 주어질 때, 미로를 탈출하는데 필요한 최단 시간을 return 하도록 solution 함수를 완성해주세요.</p><hr><h5 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h5><ul><li>  2 ≤ <code>n</code> ≤ 1,000</li><li>  1 ≤ <code>start</code> ≤ <code>n</code></li><li>  1 ≤ <code>end</code> ≤ <code>n</code></li><li>  1 ≤ <code>roads</code>의 행 길이 ≤ 3,000</li><li><code>roads</code>의 행은 [P, Q, S]로 이루어져 있습니다.<ul><li>  <code>P</code>에서 <code>Q</code>로 갈 수 있는 길이 있으며, 길을 따라 이동하는데 <code>S</code>만큼 시간이 걸립니다.</li><li>  1 ≤ <code>P</code> ≤ <code>n</code></li><li>  1 ≤ <code>Q</code> ≤ <code>n</code></li><li>  <code>P</code> ≠ <code>Q</code></li><li>  1 ≤ <code>S</code> ≤ 3,000</li><li>  서로 다른 두 방 사이에 직접 연결된 길이 여러 개 존재할 수도 있습니다.</li></ul></li><li>0 ≤ <code>traps</code>의 길이 ≤ 10<ul><li>  1 ≤ <code>traps</code>의 원소 ≤ <code>n</code></li><li>  시작 방과 도착 방은 함정이 아닙니다.</li></ul></li><li>  항상 미로를 탈출할 수 있는 경우만 주어집니다.</li></ul><hr><h5 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h5><table><thead><tr><th>n</th><th>start</th><th>end</th><th>roads</th><th>traps</th><th>result</th></tr></thead><tbody><tr><td>3</td><td>1</td><td>3</td><td>[[1, 2, 2], [3, 2, 3]]</td><td>[2]</td><td>5</td></tr><tr><td>4</td><td>1</td><td>4</td><td>[[1, 2, 1], [3, 2, 1], [2, 4, 1]]</td><td>[2, 3]</td><td>4</td></tr></tbody></table><hr><h5 id="입출력-예-설명"><a href="#입출력-예-설명" class="headerlink" title="입출력 예 설명"></a>입출력 예 설명</h5><p>입출력 예 #1</p><p>문제 예시와 같습니다.</p><p>입출력 예 #2</p><p><img src="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/c5ab2e6d-9872-42d1-9898-2890b69ce74e/MazeEx2.png" alt="MazeEx2.png"></p><p>1 → 2 → 3 → 2 → 4 순서로 이동하면 됩니다. 총 이동시간은 4입니다.</p><hr><h5 id="제한시간-안내"><a href="#제한시간-안내" class="headerlink" title="제한시간 안내"></a>제한시간 안내</h5><ul><li>  정확성 테스트 : 10초</li></ul></blockquote><br/><br/><h1 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h1><br/><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq <span class="keyword">as</span> h</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span>(<span class="params">n, start, end, roads, traps</span>):</span></span><br><span class="line">    start -=<span class="number">1</span>; end -=<span class="number">1</span>;</span><br><span class="line">    INF = <span class="built_in">float</span>(<span class="string">&quot;inf&quot;</span>);</span><br><span class="line">    graph = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    trap_dict = &#123;trap-<span class="number">1</span>:idx <span class="keyword">for</span> idx, trap <span class="keyword">in</span> <span class="built_in">enumerate</span>(traps)&#125;;</span><br><span class="line">    nodes = [];</span><br><span class="line">    isVisit = [[<span class="literal">False</span>]*n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>&lt;&lt;<span class="built_in">len</span>(traps))]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> road <span class="keyword">in</span> roads:</span><br><span class="line">        start_i, end_i, cost = road</span><br><span class="line">        graph[start_i-<span class="number">1</span>].append([end_i-<span class="number">1</span>,cost,<span class="number">0</span>])</span><br><span class="line">        graph[end_i-<span class="number">1</span>].append([start_i-<span class="number">1</span>,cost,<span class="number">1</span>])</span><br><span class="line">    </span><br><span class="line">    h.heappush(nodes,(<span class="number">0</span>,start,<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">while</span> nodes:</span><br><span class="line">        cur_time, cur_node, state = h.heappop(nodes);</span><br><span class="line">        <span class="keyword">if</span> cur_node == end : <span class="keyword">return</span> cur_time;      </span><br><span class="line">        <span class="keyword">if</span> isVisit[state][cur_node] == <span class="literal">True</span>: <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span>: isVisit[state][cur_node] = <span class="literal">True</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">for</span> next_node, next_cost, road_type <span class="keyword">in</span> graph[cur_node]:</span><br><span class="line">            next_state = state</span><br><span class="line">            cur_isTrap = <span class="number">1</span> <span class="keyword">if</span> cur_node <span class="keyword">in</span> trap_dict <span class="keyword">else</span> <span class="number">0</span>;</span><br><span class="line">            next_isTrap = <span class="number">1</span> <span class="keyword">if</span> next_node <span class="keyword">in</span> trap_dict <span class="keyword">else</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> cur_isTrap == <span class="number">0</span> <span class="keyword">and</span> next_isTrap == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> road_type == <span class="number">1</span>: <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">elif</span> (cur_isTrap + next_isTrap) == <span class="number">1</span>:</span><br><span class="line">                node_i = cur_node <span class="keyword">if</span> cur_isTrap == <span class="number">1</span> <span class="keyword">else</span> next_node</span><br><span class="line">                isTrapOn = (state &amp; (<span class="number">1</span>&lt;&lt;trap_dict[node_i]))&gt;&gt;trap_dict[node_i]</span><br><span class="line">                <span class="keyword">if</span> isTrapOn != road_type: <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                isTrapOn = (state &amp; (<span class="number">1</span>&lt;&lt;trap_dict[cur_node]))&gt;&gt;trap_dict[cur_node]</span><br><span class="line">                n_isTrapOn = (state &amp; (<span class="number">1</span>&lt;&lt;trap_dict[next_node]))&gt;&gt;trap_dict[next_node]</span><br><span class="line">                <span class="keyword">if</span> (isTrapOn ^ n_isTrapOn) != road_type: <span class="keyword">continue</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> next_isTrap == <span class="number">1</span>:</span><br><span class="line">                next_state = state ^ (<span class="number">1</span>&lt;&lt;trap_dict[next_node])</span><br><span class="line"></span><br><span class="line">            h.heappush(nodes,(cur_time+next_cost, next_node, next_state))</span><br></pre></td></tr></table></figure><br/><br/><h1 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h1><br/><br/><p>상반기 카카오 인턴 코딩테스트에서 출제된 문제인데, 당시 5번과 더불어 나의 숨을 조여온 기억이 난다. 시험 당시 4, 5번을 건들지도 못한 내가 테스트에 통과했을 정도니 당시 문제를 푸는 사람들도 나처럼 체감 난이도가 상당했을 것이다.</p><br/><p>어쨌든 해당 문제의 해설은 <a href="https://tech.kakao.com/2021/07/08/2021-%EC%B9%B4%EC%B9%B4%EC%98%A4-%EC%9D%B8%ED%84%B4%EC%8B%AD-for-tech-developers-%EC%BD%94%EB%94%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%B4%EC%84%A4/">이곳</a> 에서 친절하게 알려주고 있다. 물론 코드는 제외하고 말이다.</p><br/><br/><p>전체적인 풀이 핵심은 dijkstra를 적용하되, 함정 노드들의 상태를 구분해야 한다는 것이다.</p><p>위 링크의 해설대로 해당 문제에서는 일반적 dijkstra 하고는 다르게 지나온 노드를 다시 방문해야 할 순간이 있다. 그러나 이것은 일종의 트릭으로, 모든 함정들의 발동 조건이 같은 상황에서 같은 노드를 방문할 일은 없다. 즉, 함정의 발동상태에 따라 isVisit 여부를 달리 체크해야 하고, 이를 제외하면 일반적 dijkstra처럼 문제를 풀면 된다.</p><br/><p>나는 여기에 heap queue를 활용하여 거리를 따로 저장하고 갱신할 필요 없이 늘 최소경로를 찾아가는 식으로 구현했다.</p><br/><p>함정들의 상태를 관리하는 방법으로는 bit mask를 이용했다.</p><p>문제의 제한사항대로 함정 노드는 최대 10개기 때문에, 최대 $2^{10}$인 1024개의 상태를 구분하면 된다. 이는 문제에서 주어진 traps의 길이를 시프트 연산으로 할당한다.</p><p><img src="/img/post_images/algorithm/programmers/kakaoMaze/maze1.png"></p><br/><br/><p>heapq에서 꺼낸 노드의 상태(state)와 노드번호(cur_node)로 중복방문을 검증하고, 마지막엔 방문하게될 다음 노드의 상태도 계산하여 heapq에 넣어줘야 한다. 이때 다음 방문할 노드가 함정이라면, 다음 노드의 함정이 작동된 상태를 시프트연산을 통해 갱신하여 넘겨줘야 한다.</p><p><img src="/img/post_images/algorithm/programmers/kakaoMaze/maze2.png"></p><p>여기서 trap_dict는 각 함정의 노드번호를 key로 갖는 딕셔너리다. value에는 각 함정의 순서를 넣었는데, 이는 비트마스크에서 각 함정을 뜻하는 자릿수로 사용된다.</p><p><img src="/img/post_images/algorithm/programmers/kakaoMaze/maze3.png"></p><br/><br/><p>처음 그래프 링크들을 할당할때도 정방향과 역방향을 구분하여 넣어준다.</p><p><img src="/img/post_images/algorithm/programmers/kakaoMaze/maze4.png"></p><p>이때 append로 할당되는 배열은 [목적지 노드번호, 이동비용, 다리의 방향] 이다.<br>start 노드에게는 정방향인 다리를, end 노드에게는 역방향인 다리를 각 할당한다.</p><br/><br/><p>그런 뒤 현재 노드와 이동할 다음 노드의 함정 여부를 파악하고, 만약 상황에 맞지 않는 방향의 다리라면 건너지 않고 다음 다리를 살펴본다. 이때 state에 시프트 연산을 가하여 각 자리수에 해당하는 함정이 작동되어있는 상태인지 판단한다.</p><br/><p><img src="/img/post_images/algorithm/programmers/kakaoMaze/maze5.png"></p><p>여기서 4가지 기준으로 상황을 판단할 수 있다.</p><ol><li>일반노드 → 일반노드</li><li>일반노드 → 함정노드</li><li>함정노드 → 일반노드</li><li>함정노드 → 함정노드</li></ol><p>여기서 1번은 함정의 상태와 상관없이 늘 <strong>정방향</strong>인 다리로만 이동 가능하다.</p><p>2번 3번은 해당하는 함정노드가 작동되면 <strong>역방향</strong>, 그렇지 않으면 <strong>정방향</strong>의 다리로만 이동 가능하다.</p><p>4번에서는 두 함정이 모두 작동되거나 모두 작동하지 않았을때는 <strong>정방향</strong>, 둘 중 하나만 작동한 상태라면 역방향만 이동 가능하다.</p><br/><br/><p>만약 모든 조건에 맞는 노드라면 state를 갱신하고 heapq에 넣어주면 되고, 이렇게 각 최단거리에 해당하는 노드를 방문하며 end에 도달하면 그 값을 return하면 된다.</p><br/><br/><p>🔴 질문이나 개선이 필요한 부분 등 적극적인 피드백 환영! 🔴</p>]]></content:encoded>
      
      
      <category domain="https://sklubmk.github.io/categories/TIL/">TIL</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/">프로그래머스</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/lv4/">lv4</category>
      
      
      <category domain="https://sklubmk.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sklubmk.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://sklubmk.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/">프로그래머스</category>
      
      <category domain="https://sklubmk.github.io/tags/python/">python</category>
      
      <category domain="https://sklubmk.github.io/tags/%EC%B9%B4%EC%B9%B4%EC%98%A4/">카카오</category>
      
      <category domain="https://sklubmk.github.io/tags/lv4/">lv4</category>
      
      <category domain="https://sklubmk.github.io/tags/%EC%B5%9C%EB%8B%A8%EA%B1%B0%EB%A6%AC/">최단거리</category>
      
      <category domain="https://sklubmk.github.io/tags/%EC%B9%B4%EC%B9%B4%EC%98%A4-%EC%9D%B8%ED%84%B4/">카카오 인턴</category>
      
      
      <comments>https://sklubmk.github.io/2021/07/15/83cac01aa64b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[프로그래머스] 표 편집</title>
      <link>https://sklubmk.github.io/2021/07/15/8225d6a493d8/</link>
      <guid>https://sklubmk.github.io/2021/07/15/8225d6a493d8/</guid>
      <pubDate>Wed, 14 Jul 2021 16:39:21 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;표-편집&quot;&gt;&lt;a href=&quot;#표-편집&quot; class=&quot;headerlink&quot; title=&quot;표 편집&quot;&gt;&lt;/a&gt;표 편집&lt;/h1&gt;&lt;p&gt;Python3&lt;/p&gt;
&lt;blockquote&gt;
&lt;h6 id=&quot;문제-설명&quot;&gt;&lt;a href=&quot;#문제-설명&quot; class</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="표-편집"><a href="#표-편집" class="headerlink" title="표 편집"></a>표 편집</h1><p>Python3</p><blockquote><h6 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h6><p>[본 문제는 정확성과 효율성 테스트 각각 점수가 있는 문제입니다.]</p><p>업무용 소프트웨어를 개발하는 니니즈웍스의 인턴인 앙몬드는 명령어 기반으로 표의 행을 선택, 삭제, 복구하는 프로그램을 작성하는 과제를 맡았습니다. 세부 요구 사항은 다음과 같습니다</p><p><img src="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/d8e89054-53ba-4222-a485-dc56893f45e4/table_1.png" alt="table_1.png"></p><p>위 그림에서 파란색으로 칠해진 칸은 현재 선택된 행을 나타냅니다. 단, 한 번에 한 행만 선택할 수 있으며, 표의 범위(0행 ~ 마지막 행)를 벗어날 수 없습니다. 이때, 다음과 같은 명령어를 이용하여 표를 편집합니다.</p><ul><li>  <code>&quot;U X&quot;</code>: 현재 선택된 행에서 X칸 위에 있는 행을 선택합니다.</li><li>  <code>&quot;D X&quot;</code>: 현재 선택된 행에서 X칸 아래에 있는 행을 선택합니다.</li><li>  <code>&quot;C&quot;</code> : 현재 선택된 행을 삭제한 후, 바로 아래 행을 선택합니다. 단, 삭제된 행이 가장 마지막 행인 경우 바로 윗 행을 선택합니다.</li><li>  <code>&quot;Z&quot;</code> : 가장 최근에 삭제된 행을 원래대로 복구합니다. 단, 현재 선택된 행은 바뀌지 않습니다.</li></ul><p>예를 들어 위 표에서 <code>&quot;D 2&quot;</code>를 수행할 경우 아래 그림의 왼쪽처럼 4행이 선택되며, <code>&quot;C&quot;</code>를 수행하면 선택된 행을 삭제하고, 바로 아래 행이었던 “네오”가 적힌 행을 선택합니다(4행이 삭제되면서 아래 있던 행들이 하나씩 밀려 올라오고, 수정된 표에서 다시 4행을 선택하는 것과 동일합니다).</p><p><img src="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/453bbb71-df69-4be2-a223-67361878202c/table_2.png" alt="table_2.png"></p><p>다음으로 <code>&quot;U 3&quot;</code>을 수행한 다음 <code>&quot;C&quot;</code>를 수행한 후의 표 상태는 아래 그림과 같습니다.</p><p><img src="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/61261fa2-701d-4db5-9aa2-a56dd85a3dbf/table_3.png" alt="table_3.png"></p><p>다음으로 <code>&quot;D 4&quot;</code>를 수행한 다음 <code>&quot;C&quot;</code>를 수행한 후의 표 상태는 아래 그림과 같습니다. 5행이 표의 마지막 행 이므로, 이 경우 바로 윗 행을 선택하는 점에 주의합니다.</p><p><img src="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/b1a63278-be97-4e3a-a653-5a6aa0f477ba/table_4.png" alt="table_4.png"></p><p>다음으로 <code>&quot;U 2&quot;</code>를 수행하면 현재 선택된 행은 2행이 됩니다.</p><p><img src="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/b1189eff-e4ee-4119-bb55-a1f06e388c29/table_5.png" alt="table_5.png"></p><p>위 상태에서 <code>&quot;Z&quot;</code>를 수행할 경우 가장 최근에 제거된 <code>&quot;라이언&quot;</code>이 적힌 행이 원래대로 복구됩니다.</p><p><img src="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/0a386d19-0391-46a7-8086-9f36db31940d/table_6.png" alt="table_6.png"></p><p>다시한번 <code>&quot;Z&quot;</code>를 수행하면 그 다음으로 최근에 제거된 <code>&quot;콘&quot;</code>이 적힌 행이 원래대로 복구됩니다. 이때, 현재 선택된 행은 바뀌지 않는 점에 주의하세요.<br><img src="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/8900360f-bf0b-449b-a508-98918a14ef1d/table_7.png" alt="table_7.png"></p><p>이때, 최종 표의 상태와 처음 주어진 표의 상태를 비교하여 삭제되지 않은 행은 <code>&quot;O&quot;</code>, 삭제된 행은 <code>&quot;X&quot;</code>로 표시하면 다음과 같습니다.</p><p><img src="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/87a31aeb-50fb-4c0d-9f6b-8427632b582e/table_8.png" alt="table_8.png"></p><p>처음 표의 행 개수를 나타내는 정수 n, 처음에 선택된 행의 위치를 나타내는 정수 k, 수행한 명령어들이 담긴 문자열 배열 cmd가 매개변수로 주어질 때, 모든 명령어를 수행한 후 표의 상태와 처음 주어진 표의 상태를 비교하여 삭제되지 않은 행은 O, 삭제된 행은 X로 표시하여 문자열 형태로 return 하도록 solution 함수를 완성해주세요.</p><hr><h5 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h5><ul><li>  5 ≤ <code>n</code> ≤ 1,000,000</li><li>  0 ≤ <code>k</code> &lt; <code>n</code></li><li>1 ≤ <code>cmd</code>의 원소 개수 ≤ 200,000<ul><li>  <code>cmd</code>의 각 원소는 <code>&quot;U X&quot;</code>, <code>&quot;D X&quot;</code>, <code>&quot;C&quot;</code>, <code>&quot;Z&quot;</code> 중 하나입니다.</li><li>  X는 1 이상 300,000 이하인 자연수이며 0으로 시작하지 않습니다.</li><li>  X가 나타내는 자연수에 ‘,’ 는 주어지지 않습니다. 예를 들어 123,456의 경우 123456으로 주어집니다.</li><li>  <code>cmd</code>에 등장하는 모든 X들의 값을 합친 결과가 1,000,000 이하인 경우만 입력으로 주어집니다.</li><li>  표의 모든 행을 제거하여, 행이 하나도 남지 않는 경우는 입력으로 주어지지 않습니다.</li><li>  본문에서 각 행이 제거되고 복구되는 과정을 보다 자연스럽게 보이기 위해 <code>&quot;이름&quot;</code> 열을 사용하였으나, <code>&quot;이름&quot;</code>열의 내용이 실제 문제를 푸는 과정에 필요하지는 않습니다. <code>&quot;이름&quot;</code>열에는 서로 다른 이름들이 중복없이 채워져 있다고 가정하고 문제를 해결해 주세요.</li></ul></li><li>  표의 범위를 벗어나는 이동은 입력으로 주어지지 않습니다.</li><li>  원래대로 복구할 행이 없을 때(즉, 삭제된 행이 없을 때) “Z”가 명령어로 주어지는 경우는 없습니다.</li><li>  정답은 표의 0행부터 n - 1행까지에 해당되는 O, X를 순서대로 이어붙인 문자열 형태로 return 해주세요.</li></ul><h5 id="정확성-테스트-케이스-제한-사항"><a href="#정확성-테스트-케이스-제한-사항" class="headerlink" title="정확성 테스트 케이스 제한 사항"></a>정확성 테스트 케이스 제한 사항</h5><ul><li>  5 ≤ <code>n</code> ≤ 1,000</li><li>  1 ≤ <code>cmd</code>의 원소 개수 ≤ 1,000</li></ul><h5 id="효율성-테스트-케이스-제한-사항"><a href="#효율성-테스트-케이스-제한-사항" class="headerlink" title="효율성 테스트 케이스 제한 사항"></a>효율성 테스트 케이스 제한 사항</h5><ul><li>  주어진 조건 외 추가 제한사항 없습니다.</li></ul><hr><h5 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h5><table><thead><tr><th>n</th><th>k</th><th>cmd</th><th>result</th></tr></thead><tbody><tr><td>8</td><td>2</td><td><code>[&quot;D 2&quot;,&quot;C&quot;,&quot;U 3&quot;,&quot;C&quot;,&quot;D 4&quot;,&quot;C&quot;,&quot;U 2&quot;,&quot;Z&quot;,&quot;Z&quot;]</code></td><td><code>&quot;OOOOXOOO&quot;</code></td></tr><tr><td>8</td><td>2</td><td><code>[&quot;D 2&quot;,&quot;C&quot;,&quot;U 3&quot;,&quot;C&quot;,&quot;D 4&quot;,&quot;C&quot;,&quot;U 2&quot;,&quot;Z&quot;,&quot;Z&quot;,&quot;U 1&quot;,&quot;C&quot;]</code></td><td><code>&quot;OOXOXOOO&quot;</code></td></tr></tbody></table><hr><h5 id="입출력-예-설명"><a href="#입출력-예-설명" class="headerlink" title="입출력 예 설명"></a>입출력 예 설명</h5><p>입출력 예 #1</p><p>문제의 예시와 같습니다.</p><p>입출력 예 #2</p><p>다음은 9번째 명령어까지 수행한 후의 표 상태이며, 이는 입출력 예 #1과 같습니다.</p><p><img src="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/8900360f-bf0b-449b-a508-98918a14ef1d/table_7.png" alt="table_7.png"></p><p>10번째 명령어 <code>&quot;U 1&quot;</code>을 수행하면 <code>&quot;어피치&quot;</code>가 적힌 2행이 선택되며, 마지막 명령어 <code>&quot;C&quot;</code>를 수행하면 선택된 행을 삭제하고, 바로 아래 행이었던 <code>&quot;제이지&quot;</code>가 적힌 행을 선택합니다.</p><p><img src="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/c9798574-4aa9-4029-901f-21f83fe43164/table_9.png" alt="table_9.png"></p><p>따라서 처음 주어진 표의 상태와 최종 표의 상태를 비교하면 다음과 같습니다.</p><p><img src="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/e7ba17b2-9461-4e92-8356-81cc90adb2ec/table_10.png" alt="table_10.png"></p><hr><h5 id="제한시간-안내"><a href="#제한시간-안내" class="headerlink" title="제한시간 안내"></a>제한시간 안내</h5><ul><li>  정확성 테스트 : 10초</li><li>  효율성 테스트 : 언어별로 작성된 정답 코드의 실행 시간의 적정 배수</li></ul></blockquote><br/><br/><h1 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h1><br/><h4 id="python-풀이-1"><a href="#python-풀이-1" class="headerlink" title="python 풀이 1"></a>python 풀이 1</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span>(<span class="params">n, k, cmd</span>):</span></span><br><span class="line">    nodes = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        nodes[i] = &#123;<span class="string">&#x27;U&#x27;</span>:i-<span class="number">1</span>, <span class="string">&#x27;D&#x27;</span>:i+<span class="number">1</span>, <span class="string">&#x27;O&#x27;</span>:<span class="literal">True</span>&#125;</span><br><span class="line">    removed = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">up</span>(<span class="params">cur, x</span>):</span></span><br><span class="line">        <span class="keyword">while</span> x &gt; <span class="number">0</span> <span class="keyword">and</span> nodes[cur][<span class="string">&#x27;U&#x27;</span>] &gt; -<span class="number">1</span>:</span><br><span class="line">            cur = nodes[cur][<span class="string">&#x27;U&#x27;</span>]</span><br><span class="line">            x -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> cur</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">down</span>(<span class="params">cur, x</span>):</span></span><br><span class="line">        <span class="keyword">while</span> x &gt; <span class="number">0</span> <span class="keyword">and</span> nodes[cur][<span class="string">&#x27;D&#x27;</span>] &lt; n:</span><br><span class="line">            cur = nodes[cur][<span class="string">&#x27;D&#x27;</span>]</span><br><span class="line">            x -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> cur</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="keyword">if</span> nodes[x][<span class="string">&#x27;U&#x27;</span>] &gt; -<span class="number">1</span>:</span><br><span class="line">            nodes[nodes[x][<span class="string">&#x27;U&#x27;</span>]][<span class="string">&#x27;D&#x27;</span>] = nodes[x][<span class="string">&#x27;D&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> nodes[x][<span class="string">&#x27;D&#x27;</span>] &lt; n:</span><br><span class="line">            nodes[nodes[x][<span class="string">&#x27;D&#x27;</span>]][<span class="string">&#x27;U&#x27;</span>] = nodes[x][<span class="string">&#x27;U&#x27;</span>]</span><br><span class="line">            cur = nodes[x][<span class="string">&#x27;D&#x27;</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cur = nodes[x][<span class="string">&#x27;U&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        removed.append(x)</span><br><span class="line">        nodes[x][<span class="string">&#x27;O&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> cur        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upLink</span>(<span class="params">x, cur</span>):</span></span><br><span class="line">        <span class="keyword">if</span> cur &lt; <span class="number">0</span> <span class="keyword">or</span> nodes[cur][<span class="string">&#x27;U&#x27;</span>] &lt; <span class="number">0</span> : <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">elif</span> nodes[nodes[cur][<span class="string">&#x27;U&#x27;</span>]][<span class="string">&#x27;O&#x27;</span>] == <span class="literal">True</span>:</span><br><span class="line">            nodes[nodes[cur][<span class="string">&#x27;U&#x27;</span>]][<span class="string">&#x27;D&#x27;</span>] = x</span><br><span class="line">        <span class="keyword">else</span>: upLink(x, nodes[cur][<span class="string">&#x27;U&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">downLink</span>(<span class="params">x, cur</span>):</span></span><br><span class="line">        <span class="keyword">if</span> cur &gt;= n <span class="keyword">or</span> nodes[cur][<span class="string">&#x27;D&#x27;</span>] &gt;= n: <span class="keyword">return</span> </span><br><span class="line">        <span class="keyword">elif</span> nodes[nodes[cur][<span class="string">&#x27;D&#x27;</span>]][<span class="string">&#x27;O&#x27;</span>] == <span class="literal">True</span>:</span><br><span class="line">            nodes[nodes[cur][<span class="string">&#x27;D&#x27;</span>]][<span class="string">&#x27;U&#x27;</span>] = x</span><br><span class="line">        <span class="keyword">else</span>: downLink(x, nodes[cur][<span class="string">&#x27;D&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span>(<span class="params">x</span>):</span></span><br><span class="line">        upLink(x,x)</span><br><span class="line">        downLink(x,x)</span><br><span class="line">        nodes[x][<span class="string">&#x27;O&#x27;</span>] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> cmd:</span><br><span class="line">        cs = c.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> cs[<span class="number">0</span>] == <span class="string">&#x27;U&#x27;</span>: k = up(k, <span class="built_in">int</span>(cs[<span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">elif</span> cs[<span class="number">0</span>] == <span class="string">&#x27;D&#x27;</span>: k = down(k, <span class="built_in">int</span>(cs[<span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">elif</span> cs[<span class="number">0</span>] == <span class="string">&#x27;C&#x27;</span>: k = remove(k)</span><br><span class="line">        <span class="keyword">else</span>: insert(removed.pop())</span><br><span class="line">    answer = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        answer += <span class="string">&#x27;O&#x27;</span> <span class="keyword">if</span> nodes[i][<span class="string">&#x27;O&#x27;</span>] <span class="keyword">else</span> <span class="string">&#x27;X&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><br/><h4 id="python-풀이-2"><a href="#python-풀이-2" class="headerlink" title="python 풀이 2"></a>python 풀이 2</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span>(<span class="params">n, k, cmd</span>):</span></span><br><span class="line">    removed = []</span><br><span class="line">    up = [i - <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">2</span>)]</span><br><span class="line">    down = [i + <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">2</span>)]</span><br><span class="line">    k += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> cmd:</span><br><span class="line">        <span class="keyword">if</span> c[<span class="number">0</span>] == <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">            removed.append(k)</span><br><span class="line">            up[down[k]] = up[k]</span><br><span class="line">            down[up[k]] = down[k]</span><br><span class="line">            k = up[k] <span class="keyword">if</span> n &lt; down[k] <span class="keyword">else</span> down[k]</span><br><span class="line">        <span class="keyword">elif</span> c[<span class="number">0</span>] == <span class="string">&#x27;Z&#x27;</span>:</span><br><span class="line">            restore = removed.pop()</span><br><span class="line">            down[up[restore]] = restore</span><br><span class="line">            up[down[restore]] = restore</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            action, num = c.split()</span><br><span class="line">            <span class="keyword">if</span> action == <span class="string">&#x27;U&#x27;</span>:</span><br><span class="line">                <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(num)):</span><br><span class="line">                    k = up[k]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(num)):</span><br><span class="line">                    k = down[k]</span><br><span class="line"></span><br><span class="line">    answer = [<span class="string">&#x27;O&#x27;</span>]*n</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> removed:</span><br><span class="line">        answer[i-<span class="number">1</span>] = <span class="string">&#x27;X&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(answer)</span><br></pre></td></tr></table></figure><br/><br/><h1 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h1><br/><p>시험에서도, 시험 후 복기에서도 굉장히 애를 먹은 문제다.</p><p>우선 실제 시험 당시에는 linked-list의 구현을 포기하고 배열을 사용하여 제출했고, 나중에 프로그래머스에서 비슷한 풀이로 풀어본 결과 효율성 테케를 모두 틀렸다.</p><p>그 후 천천히 linked-list를 이용해 문제를 풀어보았는데, 첫 번째 풀이가 복잡하고 길어진 이유는 쓸데없이 노드의 고립을 고민해서다.</p><br/><p><img src="/img/post_images/algorithm/programmers/linkedList/L1.png" alt="시작 전"></p><p>예를들어 위처럼 5개의 linked list에서 2번노드, 3번노드, 1번노드를 차례대로 삭제하면 아래와 같은 과정이 된다.</p><br/><p><img src="/img/post_images/algorithm/programmers/linkedList/L2.png" alt="노드 2 삭제"></p><p><img src="/img/post_images/algorithm/programmers/linkedList/L3.png" alt="노드 3 삭제"></p><p><img src="/img/post_images/algorithm/programmers/linkedList/L4.png" alt="노드 1 삭제"></p><p>여기서 주목할 것은 2번 노드다. 2번노드는 자신이 링크(up, down)를 연결한 인접 노드 모두가 삭제 된 상황이다.</p><br/><p>이때, 2번 노드를 다시 복구하면 아래와 같은 상황이 발생한다.</p><p><img src="/img/post_images/algorithm/programmers/linkedList/L5.png" alt="노드 2 복구"></p><p>즉, 복구한 2번 노드는 완전히 고립되어 다른 살아있는 노드들과 연결될 수 없다.</p><br/><p>나는 이 오류를 고려하여 문제를 풀었고, 풀이 1에서는 On OFF를 나타내는 변수를 포함한 Dictionary를 활용했다. 하지만 이런 오류는 해당 문제에서는 일어날 수가 없었다. 애초에 문제에서 제시한 복구 기능은 마지막에 제거한 node를 살리는 것으로, 반드시 하나 이상의 살아있는 노드와 다시 연결된다. 만약 마지막으로 삭제된 노드를 복구한다는 제한사항이 없었다면 해당 방식의 풀이가 올바른 답이 될 것이다.</p><br/><p>그러나 이 문제에서는 고립 문제는 발생하지 않기 때문에 첫 번째 풀이는 다소 효율적이지 못한 코드가 되는 것이다. 이를 반영하여 풀이한 두번째 풀이에서는 복잡해지는 Dictionary를 사용하지 않고 up링크와 down링크 정보를 담은 두 배열을 사용해 문제를 풀었다. 이 때, 각각 머리 끝과 꼬리 끝을 가리키는 -1과 n+1 index를 포함한 n+2개의 배열을 초기화해서 사용했다. </p><br/><p>많은 시간을 들이며 고생했지만, 덕분에 제대로 링크드 리스트 유형의 연습을 할 수 있었다. 추후 링크드 리스트 문제를 마주쳤을 때 이 경험을 살려 문제를 돌파할 수 있을 것 같다.</p>]]></content:encoded>
      
      
      <category domain="https://sklubmk.github.io/categories/TIL/">TIL</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/">프로그래머스</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/lv3/">lv3</category>
      
      
      <category domain="https://sklubmk.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sklubmk.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://sklubmk.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/">프로그래머스</category>
      
      <category domain="https://sklubmk.github.io/tags/%EA%B5%AC%ED%98%84/">구현</category>
      
      <category domain="https://sklubmk.github.io/tags/python/">python</category>
      
      <category domain="https://sklubmk.github.io/tags/lv3/">lv3</category>
      
      <category domain="https://sklubmk.github.io/tags/linked-list/">linked list</category>
      
      
      <comments>https://sklubmk.github.io/2021/07/15/8225d6a493d8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[프로그래머스] 거리두기 확인하기</title>
      <link>https://sklubmk.github.io/2021/07/14/107cb50c44ec/</link>
      <guid>https://sklubmk.github.io/2021/07/14/107cb50c44ec/</guid>
      <pubDate>Tue, 13 Jul 2021 16:10:57 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;거리두기-확인하기&quot;&gt;&lt;a href=&quot;#거리두기-확인하기&quot; class=&quot;headerlink&quot; title=&quot;거리두기 확인하기&quot;&gt;&lt;/a&gt;거리두기 확인하기&lt;/h1&gt;&lt;p&gt;Python3&lt;/p&gt;
&lt;blockquote&gt;
&lt;h6 id=&quot;문제-설명&quot;&gt;&lt;a</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="거리두기-확인하기"><a href="#거리두기-확인하기" class="headerlink" title="거리두기 확인하기"></a>거리두기 확인하기</h1><p>Python3</p><blockquote><h6 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h6><p>개발자를 희망하는 죠르디가 카카오에 면접을 보러 왔습니다.</p><p>코로나 바이러스 감염 예방을 위해 응시자들은 거리를 둬서 대기를 해야하는데 개발 직군 면접인 만큼<br>아래와 같은 규칙으로 대기실에 거리를 두고 앉도록 안내하고 있습니다.</p><blockquote><ol><li> 대기실은 5개이며, 각 대기실은 5x5 크기입니다.</li><li> 거리두기를 위하여 응시자들 끼리는 맨해튼 거리<a href="https://programmers.co.kr/learn/courses/30/lessons/81302#fn1">1</a>가 2 이하로 앉지 말아 주세요.</li><li> 단 응시자가 앉아있는 자리 사이가 파티션으로 막혀 있을 경우에는 허용합니다.</li></ol></blockquote><p>예를 들어,</p><table><thead><tr><th><img src="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/8c056cac-ec8f-435c-a49a-8125df055c5e/PXP.png" alt="PXP.png"></th><th><img src="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/d611f66e-f9c4-4433-91ce-02887657fe7f/PX_XP.png" alt="PX_XP.png"></th><th><img src="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/ed707158-0511-457b-9e1a-7dbf34a776a5/PX_OP.png" alt="PX_OP.png"></th></tr></thead><tbody><tr><td>위 그림처럼 자리 사이에 파티션이 존재한다면 맨해튼 거리가 2여도 거리두기를 지킨 것입니다.</td><td>위 그림처럼 파티션을 사이에 두고 앉은 경우도 거리두기를 지킨 것입니다.</td><td>위 그림처럼 자리 사이가 맨해튼 거리 2이고 사이에 빈 테이블이 있는 경우는 거리두기를 지키지 않은 것입니다.</td></tr><tr><td><img src="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/4c548421-1c32-4947-af9e-a45c61501bc4/P.png" alt="P.png"></td><td><img src="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/ce799a38-668a-4038-b32f-c515b8701262/O.png" alt="O.png"></td><td><img src="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/91e8f98b-baeb-4f81-8cb6-5bafebebdcc7/X.png" alt="X.png"></td></tr><tr><td>응시자가 앉아있는 자리(<code>P</code>)를 의미합니다.</td><td>빈 테이블(<code>O</code>)을 의미합니다.</td><td>파티션(<code>X</code>)을 의미합니다.</td></tr></tbody></table><p>5개의 대기실을 본 죠르디는 각 대기실에서 응시자들이 거리두기를 잘 기키고 있는지 알고 싶어졌습니다. 자리에 앉아있는 응시자들의 정보와 대기실 구조를 대기실별로 담은 2차원 문자열 배열 <code>places</code>가 매개변수로 주어집니다. 각 대기실별로 거리두기를 지키고 있으면 1을, 한 명이라도 지키지 않고 있으면 0을 배열에 담아 return 하도록 solution 함수를 완성해 주세요.</p><hr><h5 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h5><ul><li><code>places</code>의 행 길이(대기실 개수) = 5<ul><li>  <code>places</code>의 각 행은 하나의 대기실 구조를 나타냅니다.</li></ul></li><li>  <code>places</code>의 열 길이(대기실 세로 길이) = 5</li><li><code>places</code>의 원소는 <code>P</code>,<code>O</code>,<code>X</code>로 이루어진 문자열입니다.<ul><li>  <code>places</code> 원소의 길이(대기실 가로 길이) = 5</li><li>  <code>P</code>는 응시자가 앉아있는 자리를 의미합니다.</li><li>  <code>O</code>는 빈 테이블을 의미합니다.</li><li>  <code>X</code>는 파티션을 의미합니다.</li></ul></li><li>  입력으로 주어지는 5개 대기실의 크기는 모두 5x5 입니다.</li><li>return 값 형식<ul><li>  1차원 정수 배열에 5개의 원소를 담아서 return 합니다.</li><li>  <code>places</code>에 담겨 있는 5개 대기실의 순서대로, 거리두기 준수 여부를 차례대로 배열에 담습니다.</li><li>  각 대기실 별로 모든 응시자가 거리두기를 지키고 있으면 1을, 한 명이라도 지키지 않고 있으면 0을 담습니다.</li></ul></li></ul><hr><h5 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h5><table><thead><tr><th>places</th><th>result</th></tr></thead><tbody><tr><td><code>[[&quot;POOOP&quot;, &quot;OXXOX&quot;, &quot;OPXPX&quot;, &quot;OOXOX&quot;, &quot;POXXP&quot;], [&quot;POOPX&quot;, &quot;OXPXP&quot;, &quot;PXXXO&quot;, &quot;OXXXO&quot;, &quot;OOOPP&quot;], [&quot;PXOPX&quot;, &quot;OXOXP&quot;, &quot;OXPOX&quot;, &quot;OXXOP&quot;, &quot;PXPOX&quot;], [&quot;OOOXX&quot;, &quot;XOOOX&quot;, &quot;OOOXX&quot;, &quot;OXOOX&quot;, &quot;OOOOO&quot;], [&quot;PXPXP&quot;, &quot;XPXPX&quot;, &quot;PXPXP&quot;, &quot;XPXPX&quot;, &quot;PXPXP&quot;]]</code></td><td>[1, 0, 1, 1, 1]</td></tr></tbody></table><hr><h5 id="입출력-예-설명"><a href="#입출력-예-설명" class="headerlink" title="입출력 예 설명"></a>입출력 예 설명</h5><p>입출력 예 #1</p><p>첫 번째 대기실</p><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>No.</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td></tr><tr><td>0</td><td>P</td><td>O</td><td>O</td><td>O</td><td>P</td></tr><tr><td>1</td><td>O</td><td>X</td><td>X</td><td>O</td><td>X</td></tr><tr><td>2</td><td>O</td><td>P</td><td>X</td><td>P</td><td>X</td></tr><tr><td>3</td><td>O</td><td>O</td><td>X</td><td>O</td><td>X</td></tr><tr><td>4</td><td>P</td><td>O</td><td>X</td><td>X</td><td>P</td></tr></tbody></table><ul><li>  모든 응시자가 거리두기를 지키고 있습니다.</li></ul><p>두 번째 대기실</p><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>No.</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td></tr><tr><td>0</td><td>P</td><td>O</td><td>O</td><td>P</td><td>X</td></tr><tr><td>1</td><td>O</td><td>X</td><td>P</td><td>X</td><td>P</td></tr><tr><td>2</td><td>P</td><td>X</td><td>X</td><td>X</td><td>O</td></tr><tr><td>3</td><td>O</td><td>X</td><td>X</td><td>X</td><td>O</td></tr><tr><td>4</td><td>O</td><td>O</td><td>O</td><td>P</td><td>P</td></tr></tbody></table><ul><li>  (0, 0) 자리의 응시자와 (2, 0) 자리의 응시자가 거리두기를 지키고 있지 않습니다.</li><li>  (1, 2) 자리의 응시자와 (0, 3) 자리의 응시자가 거리두기를 지키고 있지 않습니다.</li><li>  (4, 3) 자리의 응시자와 (4, 4) 자리의 응시자가 거리두기를 지키고 있지 않습니다.</li></ul><p>세 번째 대기실</p><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>No.</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td></tr><tr><td>0</td><td>P</td><td>X</td><td>O</td><td>P</td><td>X</td></tr><tr><td>1</td><td>O</td><td>X</td><td>O</td><td>X</td><td>P</td></tr><tr><td>2</td><td>O</td><td>X</td><td>P</td><td>O</td><td>X</td></tr><tr><td>3</td><td>O</td><td>X</td><td>X</td><td>O</td><td>P</td></tr><tr><td>4</td><td>P</td><td>X</td><td>P</td><td>O</td><td>X</td></tr></tbody></table><ul><li>  모든 응시자가 거리두기를 지키고 있습니다.</li></ul><p>네 번째 대기실</p><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>No.</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td></tr><tr><td>0</td><td>O</td><td>O</td><td>O</td><td>X</td><td>X</td></tr><tr><td>1</td><td>X</td><td>O</td><td>O</td><td>O</td><td>X</td></tr><tr><td>2</td><td>O</td><td>O</td><td>O</td><td>X</td><td>X</td></tr><tr><td>3</td><td>O</td><td>X</td><td>O</td><td>O</td><td>X</td></tr><tr><td>4</td><td>O</td><td>O</td><td>O</td><td>O</td><td>O</td></tr></tbody></table><ul><li>  대기실에 응시자가 없으므로 거리두기를 지키고 있습니다.</li></ul><p>다섯 번째 대기실</p><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>No.</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td></tr><tr><td>0</td><td>P</td><td>X</td><td>P</td><td>X</td><td>P</td></tr><tr><td>1</td><td>X</td><td>P</td><td>X</td><td>P</td><td>X</td></tr><tr><td>2</td><td>P</td><td>X</td><td>P</td><td>X</td><td>P</td></tr><tr><td>3</td><td>X</td><td>P</td><td>X</td><td>P</td><td>X</td></tr><tr><td>4</td><td>P</td><td>X</td><td>P</td><td>X</td><td>P</td></tr></tbody></table><ul><li>  모든 응시자가 거리두기를 지키고 있습니다.</li></ul><p>두 번째 대기실을 제외한 모든 대기실에서 거리두기가 지켜지고 있으므로, 배열 [1, 0, 1, 1, 1]을 return 합니다.</p><hr><h5 id="제한시간-안내"><a href="#제한시간-안내" class="headerlink" title="제한시간 안내"></a>제한시간 안내</h5><ul><li>  정확성 테스트 : 10초</li></ul><hr><ol><li> 두 테이블 T1, T2가 행렬 (r1, c1), (r2, c2)에 각각 위치하고 있다면, T1, T2 사이의 맨해튼 거리는 |r1 - r2| + |c1 - c2| 입니다. <a href="https://programmers.co.kr/learn/courses/30/lessons/81302#fnref1">↩</a></li></ol></blockquote><br/><br/><h1 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span>(<span class="params">places</span>):</span></span><br><span class="line">    answer = []</span><br><span class="line">    <span class="keyword">for</span> place <span class="keyword">in</span> places:</span><br><span class="line">        <span class="comment"># add person    </span></span><br><span class="line">        per = []    </span><br><span class="line">        <span class="keyword">for</span> row,t <span class="keyword">in</span> <span class="built_in">enumerate</span>(place):</span><br><span class="line">            <span class="keyword">for</span> col,p <span class="keyword">in</span> <span class="built_in">enumerate</span>(t):</span><br><span class="line">                <span class="keyword">if</span> p == <span class="string">&#x27;P&#x27;</span>: per.append([row,col])</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">calcBetweenLength</span>(<span class="params">p1,p2</span>):</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">abs</span>(p1[<span class="number">0</span>] - p2[<span class="number">0</span>]) + <span class="built_in">abs</span>(p1[<span class="number">1</span>] - p2[<span class="number">1</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">calcIsRight</span>(<span class="params">arr_p</span>):</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(arr_p) &lt;= <span class="number">1</span> : <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            new_arr = arr_p[:]</span><br><span class="line">            cur = new_arr.pop(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> new_arr:</span><br><span class="line">                c = calcBetweenLength(cur,p)</span><br><span class="line">                <span class="keyword">if</span> c == <span class="number">1</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">2</span>:</span><br><span class="line">                    min_r = <span class="built_in">min</span>(cur[<span class="number">0</span>],p[<span class="number">0</span>])</span><br><span class="line">                    min_c = <span class="built_in">min</span>(cur[<span class="number">1</span>],p[<span class="number">1</span>])</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span> cur[<span class="number">0</span>] == p[<span class="number">0</span>] <span class="keyword">and</span> place[min_r][min_c + <span class="number">1</span>] == <span class="string">&#x27;X&#x27;</span>: <span class="keyword">continue</span></span><br><span class="line">                    <span class="keyword">elif</span> cur[<span class="number">1</span>] == p[<span class="number">1</span>] <span class="keyword">and</span> place[min_r + <span class="number">1</span>][min_c] == <span class="string">&#x27;X&#x27;</span>: <span class="keyword">continue</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span> cur[<span class="number">0</span>] != p[<span class="number">0</span>] <span class="keyword">and</span> cur[<span class="number">1</span>] != p[<span class="number">1</span>]:</span><br><span class="line">                        <span class="keyword">if</span> place[min_r][min_c] == <span class="string">&#x27;P&#x27;</span> <span class="keyword">and</span> place[min_r+<span class="number">1</span>][min_c] == <span class="string">&#x27;X&#x27;</span> <span class="keyword">and</span> \</span><br><span class="line">                            place[min_r][min_c+<span class="number">1</span>] == <span class="string">&#x27;X&#x27;</span>: <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">elif</span> place[min_r][min_c+<span class="number">1</span>] == <span class="string">&#x27;P&#x27;</span> <span class="keyword">and</span> place[min_r][min_c] == <span class="string">&#x27;X&#x27;</span> <span class="keyword">and</span> \</span><br><span class="line">                            place[min_r+<span class="number">1</span>][min_c+<span class="number">1</span>] == <span class="string">&#x27;X&#x27;</span>: <span class="keyword">continue</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> calcIsRight(new_arr)</span><br><span class="line">          </span><br><span class="line">        answer.append(<span class="number">1</span> <span class="keyword">if</span> calcIsRight(per) <span class="keyword">else</span> <span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><br/><br/><h1 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h1><br/><p>구현 능력을 묻는 카카오 인턴쉽 2번째 문제다.</p><p>지도가 주어지고, 이를 해석하며 풀어야하는 문제로 풀이 난이도 자체는 크게 어렵지 않으나 간단하게 풀리지 않는 경우가 많은 유형의 문제다.</p><p>따라서 문제의 요구사항에 집중하며 풀어야 하는데, 나는 이 문제를 bfs처럼 풀이했다.</p><p>우선 사람들의 위치만을 인식하여 per 배열에 담고, 이들 서로간의 거리를 계산하며 문제를 풀었다.</p><p>따라서 사람의 등장에 따라 효율성이 떨어질 수 있지만, 주어진 맵의 크기가 작아 크게 상관 없었다.</p><p>단순히 5x5 크기의 map을 돌며 풀 수 있는 풀이로 개선해봐야겠다.</p><br/><p>-&gt;  풀이 개선 추가</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span>(<span class="params">places</span>):</span></span><br><span class="line">    answer = []</span><br><span class="line">    dx = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">    dy = [<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,-<span class="number">1</span>]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sol</span>(<span class="params">place</span>):</span></span><br><span class="line">        <span class="keyword">for</span> r, row <span class="keyword">in</span> <span class="built_in">enumerate</span>(place):</span><br><span class="line">            <span class="keyword">for</span> c, p <span class="keyword">in</span> <span class="built_in">enumerate</span>(row):</span><br><span class="line">                <span class="keyword">if</span> p == <span class="string">&#x27;P&#x27;</span>:</span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">                        <span class="keyword">if</span> -<span class="number">1</span> &lt; r+dx[i] &lt; <span class="number">5</span> <span class="keyword">and</span> -<span class="number">1</span> &lt; c+dy[i] &lt; <span class="number">5</span> <span class="keyword">and</span> place[r+dx[i]][c+dy[i]] == <span class="string">&#x27;P&#x27;</span>:</span><br><span class="line">                            <span class="keyword">if</span> i &lt; <span class="number">2</span> : <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">                            <span class="keyword">elif</span> i == <span class="number">2</span> <span class="keyword">and</span> (place[r+<span class="number">1</span>][c] != <span class="string">&#x27;X&#x27;</span> <span class="keyword">or</span> place[r][c+<span class="number">1</span>] != <span class="string">&#x27;X&#x27;</span>): <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">                            <span class="keyword">elif</span> i == <span class="number">3</span> <span class="keyword">and</span> place[r][c+<span class="number">1</span>] != <span class="string">&#x27;X&#x27;</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">                            <span class="keyword">elif</span> i == <span class="number">4</span> <span class="keyword">and</span> place[r+<span class="number">1</span>][c] != <span class="string">&#x27;X&#x27;</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">                            <span class="keyword">elif</span> i == <span class="number">5</span> <span class="keyword">and</span> (place[r][c-<span class="number">1</span>] != <span class="string">&#x27;X&#x27;</span> <span class="keyword">or</span> place[r+<span class="number">1</span>][c] != <span class="string">&#x27;X&#x27;</span>): <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">                            </span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> places:</span><br><span class="line">        answer.append(sol(p))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sklubmk.github.io/categories/TIL/">TIL</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/">프로그래머스</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/lv2/">lv2</category>
      
      
      <category domain="https://sklubmk.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sklubmk.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://sklubmk.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/">프로그래머스</category>
      
      <category domain="https://sklubmk.github.io/tags/%EA%B5%AC%ED%98%84/">구현</category>
      
      <category domain="https://sklubmk.github.io/tags/python/">python</category>
      
      <category domain="https://sklubmk.github.io/tags/%EC%B9%B4%EC%B9%B4%EC%98%A4/">카카오</category>
      
      <category domain="https://sklubmk.github.io/tags/lv2/">lv2</category>
      
      
      <comments>https://sklubmk.github.io/2021/07/14/107cb50c44ec/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[프로그래머스] 숫자 문자열과 영단어</title>
      <link>https://sklubmk.github.io/2021/07/13/8c928d16f64b/</link>
      <guid>https://sklubmk.github.io/2021/07/13/8c928d16f64b/</guid>
      <pubDate>Tue, 13 Jul 2021 14:56:35 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;숫자-문자열과-영단어&quot;&gt;&lt;a href=&quot;#숫자-문자열과-영단어&quot; class=&quot;headerlink&quot; title=&quot;숫자 문자열과 영단어&quot;&gt;&lt;/a&gt;숫자 문자열과 영단어&lt;/h1&gt;&lt;p&gt;Python3&lt;/p&gt;
&lt;blockquote&gt;
&lt;h6 id=&quot;문</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="숫자-문자열과-영단어"><a href="#숫자-문자열과-영단어" class="headerlink" title="숫자 문자열과 영단어"></a>숫자 문자열과 영단어</h1><p>Python3</p><blockquote><h6 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h6><p><img src="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/d31cb063-4025-4412-8cbc-6ac6909cf93e/img1.png" alt="img1.png"></p><p>네오와 프로도가 숫자놀이를 하고 있습니다. 네오가 프로도에게 숫자를 건넬 때 일부 자릿수를 영단어로 바꾼 카드를 건네주면 프로도는 원래 숫자를 찾는 게임입니다.</p><p>다음은 숫자의 일부 자릿수를 영단어로 바꾸는 예시입니다.</p><ul><li>  1478 → “one4seveneight”</li><li>  234567 → “23four5six7”</li><li>  10203 → “1zerotwozero3”</li></ul><p>이렇게 숫자의 일부 자릿수가 영단어로 바뀌어졌거나, 혹은 바뀌지 않고 그대로인 문자열 <code>s</code>가 매개변수로 주어집니다. <code>s</code>가 의미하는 원래 숫자를 return 하도록 solution 함수를 완성해주세요.</p><p>참고로 각 숫자에 대응되는 영단어는 다음 표와 같습니다.</p><table><thead><tr><th>숫자</th><th>영단어</th></tr></thead><tbody><tr><td>0</td><td>zero</td></tr><tr><td>1</td><td>one</td></tr><tr><td>2</td><td>two</td></tr><tr><td>3</td><td>three</td></tr><tr><td>4</td><td>four</td></tr><tr><td>5</td><td>five</td></tr><tr><td>6</td><td>six</td></tr><tr><td>7</td><td>seven</td></tr><tr><td>8</td><td>eight</td></tr><tr><td>9</td><td>nine</td></tr></tbody></table><hr><h5 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h5><ul><li>  1 ≤ <code>s</code>의 길이 ≤ 50</li><li>  <code>s</code>가 “zero” 또는 “0”으로 시작하는 경우는 주어지지 않습니다.</li><li>  return 값이 1 이상 2,000,000,000 이하의 정수가 되는 올바른 입력만 <code>s</code>로 주어집니다.</li></ul><hr><h5 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h5><table><thead><tr><th>s</th><th>result</th></tr></thead><tbody><tr><td><code>&quot;one4seveneight&quot;</code></td><td>1478</td></tr><tr><td><code>&quot;23four5six7&quot;</code></td><td>234567</td></tr><tr><td><code>&quot;2three45sixseven&quot;</code></td><td>234567</td></tr><tr><td><code>&quot;123&quot;</code></td><td>123</td></tr></tbody></table><hr><h5 id="입출력-예-설명"><a href="#입출력-예-설명" class="headerlink" title="입출력 예 설명"></a>입출력 예 설명</h5><p>입출력 예 #1</p><ul><li>  문제 예시와 같습니다.</li></ul><p>입출력 예 #2</p><ul><li>  문제 예시와 같습니다.</li></ul><p>입출력 예 #3</p><ul><li>  “three”는 3, “six”는 6, “seven”은 7에 대응되기 때문에 정답은 입출력 예 #2와 같은 234567이 됩니다.</li><li>  입출력 예 #2와 #3과 같이 같은 정답을 가리키는 문자열이 여러 가지가 나올 수 있습니다.</li></ul><p>입출력 예 #4</p><ul><li>  <code>s</code>에는 영단어로 바뀐 부분이 없습니다.</li></ul><hr><h5 id="제한시간-안내"><a href="#제한시간-안내" class="headerlink" title="제한시간 안내"></a>제한시간 안내</h5><ul><li>  정확성 테스트 : 10초</li></ul></blockquote><br/><br/><h1 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h1><br/><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span>(<span class="params">s</span>):</span></span><br><span class="line">    numbers = &#123;<span class="number">0</span>:<span class="string">&#x27;zero&#x27;</span>,<span class="number">1</span>:<span class="string">&#x27;one&#x27;</span>,<span class="number">2</span>:<span class="string">&#x27;two&#x27;</span>,<span class="number">3</span>:<span class="string">&#x27;three&#x27;</span>,<span class="number">4</span>:<span class="string">&#x27;four&#x27;</span>,<span class="number">5</span>:<span class="string">&#x27;five&#x27;</span>,<span class="number">6</span>:<span class="string">&#x27;six&#x27;</span>,<span class="number">7</span>:<span class="string">&#x27;seven&#x27;</span>,<span class="number">8</span>:<span class="string">&#x27;eight&#x27;</span>,<span class="number">9</span>:<span class="string">&#x27;nine&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> numbers.items():</span><br><span class="line">        s = s.replace(v,<span class="built_in">str</span>(k)) </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(s)</span><br></pre></td></tr></table></figure><br/><br/><h1 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h1><br/><p>카카오 채용연계 인턴십에서 풀었던 첫 번째 문제.</p><p>문자열에서 영단어를 숫자로 변환하면 되는 간단한 문제다.</p>]]></content:encoded>
      
      
      <category domain="https://sklubmk.github.io/categories/TIL/">TIL</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/">프로그래머스</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/lv1/">lv1</category>
      
      
      <category domain="https://sklubmk.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sklubmk.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://sklubmk.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/">프로그래머스</category>
      
      <category domain="https://sklubmk.github.io/tags/lv1/">lv1</category>
      
      <category domain="https://sklubmk.github.io/tags/python/">python</category>
      
      <category domain="https://sklubmk.github.io/tags/%EC%B9%B4%EC%B9%B4%EC%98%A4/">카카오</category>
      
      <category domain="https://sklubmk.github.io/tags/%EB%AC%B8%EC%9E%90%EC%97%B4/">문자열</category>
      
      
      <comments>https://sklubmk.github.io/2021/07/13/8c928d16f64b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[프로그래머스] 더 맵게</title>
      <link>https://sklubmk.github.io/2021/07/13/728e2ced17fd/</link>
      <guid>https://sklubmk.github.io/2021/07/13/728e2ced17fd/</guid>
      <pubDate>Tue, 13 Jul 2021 14:29:55 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;더-맵게&quot;&gt;&lt;a href=&quot;#더-맵게&quot; class=&quot;headerlink&quot; title=&quot;더 맵게&quot;&gt;&lt;/a&gt;더 맵게&lt;/h1&gt;&lt;p&gt;Python3&lt;/p&gt;
&lt;blockquote&gt;
&lt;h6 id=&quot;문제-설명&quot;&gt;&lt;a href=&quot;#문제-설명&quot; class</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="더-맵게"><a href="#더-맵게" class="headerlink" title="더 맵게"></a>더 맵게</h1><p>Python3</p><blockquote><h6 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h6><p>매운 것을 좋아하는 Leo는 모든 음식의 스코빌 지수를 K 이상으로 만들고 싶습니다. 모든 음식의 스코빌 지수를 K 이상으로 만들기 위해 Leo는 스코빌 지수가 가장 낮은 두 개의 음식을 아래와 같이 특별한 방법으로 섞어 새로운 음식을 만듭니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">섞은 음식의 스코빌 지수 = 가장 맵지 않은 음식의 스코빌 지수 + (두 번째로 맵지 않은 음식의 스코빌 지수 * 2)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Leo는 모든 음식의 스코빌 지수가 K 이상이 될 때까지 반복하여 섞습니다.<br>Leo가 가진 음식의 스코빌 지수를 담은 배열 scoville과 원하는 스코빌 지수 K가 주어질 때, 모든 음식의 스코빌 지수를 K 이상으로 만들기 위해 섞어야 하는 최소 횟수를 return 하도록 solution 함수를 작성해주세요.</p><h5 id="제한-사항"><a href="#제한-사항" class="headerlink" title="제한 사항"></a>제한 사항</h5><ul><li>  scoville의 길이는 2 이상 1,000,000 이하입니다.</li><li>  K는 0 이상 1,000,000,000 이하입니다.</li><li>  scoville의 원소는 각각 0 이상 1,000,000 이하입니다.</li><li>  모든 음식의 스코빌 지수를 K 이상으로 만들 수 없는 경우에는 -1을 return 합니다.</li></ul><h5 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h5><table><thead><tr><th>scoville</th><th>K</th><th>return</th></tr></thead><tbody><tr><td>[1, 2, 3, 9, 10, 12]</td><td>7</td><td>2</td></tr></tbody></table><h5 id="입출력-예-설명"><a href="#입출력-예-설명" class="headerlink" title="입출력 예 설명"></a>입출력 예 설명</h5><ol><li><p>스코빌 지수가 1인 음식과 2인 음식을 섞으면 음식의 스코빌 지수가 아래와 같이 됩니다.<br> 새로운 음식의 스코빌 지수 = 1 + (2 * 2) = 5<br> 가진 음식의 스코빌 지수 = [5, 3, 9, 10, 12]</p></li><li><p>스코빌 지수가 3인 음식과 5인 음식을 섞으면 음식의 스코빌 지수가 아래와 같이 됩니다.<br> 새로운 음식의 스코빌 지수 = 3 + (5 * 2) = 13<br> 가진 음식의 스코빌 지수 = [13, 9, 10, 12]</p></li></ol><p>모든 음식의 스코빌 지수가 7 이상이 되었고 이때 섞은 횟수는 2회입니다.</p></blockquote><br/><br/><h1 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h1><br/><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq <span class="keyword">as</span> h</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span>(<span class="params">scoville, K</span>):</span></span><br><span class="line">    answer = <span class="number">0</span></span><br><span class="line">    h.heapify(scoville)</span><br><span class="line">    <span class="keyword">while</span> scoville[<span class="number">0</span>] &lt; K:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(scoville) == <span class="number">1</span>: <span class="keyword">return</span> -<span class="number">1</span> </span><br><span class="line">        v = h.heappop(scoville) + h.heappop(scoville) * <span class="number">2</span></span><br><span class="line">        h.heappush(scoville, v)</span><br><span class="line">        answer += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><br/><br/><h1 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h1><br/><p>heap을 사용하면 매우 간단히 풀 수 있는 문제다.</p><p>scoville 지수를 정렬한 뒤, 최소 값을 계산하여 이를 다시 갱신해야 한다.</p><p>이 때 heap 자료구조를 사용하면 빠르게 문제를 풀 수 있다.</p>]]></content:encoded>
      
      
      <category domain="https://sklubmk.github.io/categories/TIL/">TIL</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/">프로그래머스</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/lv2/">lv2</category>
      
      
      <category domain="https://sklubmk.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sklubmk.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://sklubmk.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/">프로그래머스</category>
      
      <category domain="https://sklubmk.github.io/tags/python/">python</category>
      
      <category domain="https://sklubmk.github.io/tags/lv2/">lv2</category>
      
      <category domain="https://sklubmk.github.io/tags/heap/">heap</category>
      
      <category domain="https://sklubmk.github.io/tags/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/">자료구조</category>
      
      
      <comments>https://sklubmk.github.io/2021/07/13/728e2ced17fd/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[프로그래머스] 도둑질</title>
      <link>https://sklubmk.github.io/2021/07/13/bf25ae3d8872/</link>
      <guid>https://sklubmk.github.io/2021/07/13/bf25ae3d8872/</guid>
      <pubDate>Mon, 12 Jul 2021 16:28:43 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;도둑질&quot;&gt;&lt;a href=&quot;#도둑질&quot; class=&quot;headerlink&quot; title=&quot;도둑질&quot;&gt;&lt;/a&gt;도둑질&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Python3&lt;/p&gt;
&lt;h6 id=&quot;문제-설명&quot;&gt;&lt;a href=&quot;#문제-설명&quot; class=&quot;he</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="도둑질"><a href="#도둑질" class="headerlink" title="도둑질"></a>도둑질</h1><blockquote><p>Python3</p><h6 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h6><p>도둑이 어느 마을을 털 계획을 하고 있습니다. 이 마을의 모든 집들은 아래 그림과 같이 동그랗게 배치되어 있습니다.</p><p><img src="https://grepp-programmers.s3.amazonaws.com/files/ybm/e7dd4f51c3/a228c73d-1cbe-4d59-bb5d-833fd18d3382.png" alt="image.png"></p><p>각 집들은 서로 인접한 집들과 방범장치가 연결되어 있기 때문에 인접한 두 집을 털면 경보가 울립니다.</p><p>각 집에 있는 돈이 담긴 배열 money가 주어질 때, 도둑이 훔칠 수 있는 돈의 최댓값을 return 하도록 solution 함수를 작성하세요.</p><h5 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h5><ul><li>  이 마을에 있는 집은 3개 이상 1,000,000개 이하입니다.</li><li>  money 배열의 각 원소는 0 이상 1,000 이하인 정수입니다.</li></ul><h5 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h5><table><thead><tr><th>money</th><th>return</th></tr></thead><tbody><tr><td>[1, 2, 3, 1]</td><td>4</td></tr></tbody></table></blockquote><br/><br/><h1 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h1><br/><h4 id="python"><a href="#python" class="headerlink" title="python"></a>python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span>(<span class="params">money</span>):</span></span><br><span class="line"></span><br><span class="line">    f = [<span class="number">0</span>] * <span class="built_in">len</span>(money)</span><br><span class="line">    f[<span class="number">0</span>] = f[<span class="number">1</span>] = money[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">len</span>(money)-<span class="number">1</span>):</span><br><span class="line">        f[i] = <span class="built_in">max</span>(f[i-<span class="number">2</span>] + money[i], f[i-<span class="number">1</span>])</span><br><span class="line">    </span><br><span class="line">    s = [<span class="number">0</span>] * <span class="built_in">len</span>(money)</span><br><span class="line">    s[<span class="number">1</span>] = money[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">len</span>(money)):</span><br><span class="line">        s[i] = <span class="built_in">max</span>(s[i-<span class="number">2</span>] + money[i], s[i-<span class="number">1</span>])        </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(f+s)</span><br></pre></td></tr></table></figure><br/><br/><h1 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h1><br/><p>동적계획법(Dynamic Programming) 유형의 꽤나 깊은 생각을 요하는 문제다.</p><p>반복문을 돌며 현재 집을 기준으로 지난 집들의 최댓값을 누적시키는 것이 포인트다.</p><p>여기까지는 기본적인 DP의 유형을 따르지만, 첫 번째 집이 선택되는 경우와 그렇지 못한 경우에 따라 마지막 집을 선택할 수 있는지에대한 여부가 갈리기 때문에 이를 신경 쓰는 과정에서 다소 시간이 걸렸다.</p><p>또한, 직전 집의 최댓값을 바로 다음 인덱스의 집에서도 적용할 수 있다는 생각은 처음에 떠오르지 않았다.</p><p>몇 번의 시행착오를 거듭한 끝에 답을 구할 수 있었고, 아이러니하게도 풀이를 계속 고민할 수록 코드의 길이는 짧아졌다.</p><p>DP는 풀이에 도달하기 까지 깊은 생각을 요하지만, 막상 풀이는 매우 짧고 간결한 것 같다.</p><p>무언가 DP 유형의 문제를 풀면서 풀이가 지저분하게 길어지고 있다면, 현재 문제를 잘못 접근하고 있다는 생각을 할 필요가 있다.</p>]]></content:encoded>
      
      
      <category domain="https://sklubmk.github.io/categories/TIL/">TIL</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/">프로그래머스</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/lv4/">lv4</category>
      
      
      <category domain="https://sklubmk.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sklubmk.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://sklubmk.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/">프로그래머스</category>
      
      <category domain="https://sklubmk.github.io/tags/python/">python</category>
      
      <category domain="https://sklubmk.github.io/tags/DP/">DP</category>
      
      <category domain="https://sklubmk.github.io/tags/lv4/">lv4</category>
      
      
      <comments>https://sklubmk.github.io/2021/07/13/bf25ae3d8872/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[프로그래머스] 등굣길</title>
      <link>https://sklubmk.github.io/2021/07/07/01aa6c992450/</link>
      <guid>https://sklubmk.github.io/2021/07/07/01aa6c992450/</guid>
      <pubDate>Tue, 06 Jul 2021 17:44:59 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;등굣길&quot;&gt;&lt;a href=&quot;#등굣길&quot; class=&quot;headerlink&quot; title=&quot;등굣길&quot;&gt;&lt;/a&gt;등굣길&lt;/h1&gt;&lt;p&gt;Python3&lt;/p&gt;
&lt;blockquote&gt;
&lt;h6 id=&quot;문제-설명&quot;&gt;&lt;a href=&quot;#문제-설명&quot; class=&quot;he</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="등굣길"><a href="#등굣길" class="headerlink" title="등굣길"></a>등굣길</h1><p>Python3</p><blockquote><h6 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h6><p>계속되는 폭우로 일부 지역이 물에 잠겼습니다. 물에 잠기지 않은 지역을 통해 학교를 가려고 합니다. 집에서 학교까지 가는 길은 m x n 크기의 격자모양으로 나타낼 수 있습니다.</p><p>아래 그림은 m = 4, n = 3 인 경우입니다.</p><p><img src="https://grepp-programmers.s3.amazonaws.com/files/ybm/056f54e618/f167a3bc-e140-4fa8-a8f8-326a99e0f567.png" alt="image0.png"></p><p>가장 왼쪽 위, 즉 집이 있는 곳의 좌표는 (1, 1)로 나타내고 가장 오른쪽 아래, 즉 학교가 있는 곳의 좌표는 (m, n)으로 나타냅니다.</p><p>격자의 크기 m, n과 물이 잠긴 지역의 좌표를 담은 2차원 배열 puddles이 매개변수로 주어집니다. 오른쪽과 아래쪽으로만 움직여 집에서 학교까지 갈 수 있는 최단경로의 개수를 1,000,000,007로 나눈 나머지를 return 하도록 solution 함수를 작성해주세요.</p><h5 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h5><ul><li>  격자의 크기 m, n은 1 이상 100 이하인 자연수입니다.</li><li>  m과 n이 모두 1인 경우는 입력으로 주어지지 않습니다.</li><li>  물에 잠긴 지역은 0개 이상 10개 이하입니다.</li><li>  집과 학교가 물에 잠긴 경우는 입력으로 주어지지 않습니다.</li></ul><h5 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h5><table><thead><tr><th>m</th><th>n</th><th>puddles</th><th>return</th></tr></thead><tbody><tr><td>4</td><td>3</td><td>[[2, 2]]</td><td>4</td></tr></tbody></table><h5 id="입출력-예-설명"><a href="#입출력-예-설명" class="headerlink" title="입출력 예 설명"></a>입출력 예 설명</h5><p><img src="https://grepp-programmers.s3.amazonaws.com/files/ybm/32c67958d5/729216f3-f305-4ad1-b3b0-04c2ba0b379a.png" alt="image1.png"></p></blockquote><br/><br/><h1 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h1><br/><h4 id="python"><a href="#python" class="headerlink" title="python"></a>python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span>(<span class="params">m, n, puddles</span>):</span></span><br><span class="line">    <span class="keyword">if</span> m == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">1</span>: <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    maps = [-<span class="number">1</span>]*(m*n)    </span><br><span class="line">    maps[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> puddles:</span><br><span class="line">        maps[(p[<span class="number">1</span>]-<span class="number">1</span>)*m + p[<span class="number">0</span>]-<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> maps[i+j*m] == <span class="number">0</span> <span class="keyword">or</span> (i == <span class="number">0</span> <span class="keyword">and</span> j == <span class="number">0</span>) : <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">elif</span> i == <span class="number">0</span> <span class="keyword">and</span> j != <span class="number">0</span> : maps[i+j*m] = maps[i+(j-<span class="number">1</span>)*m]</span><br><span class="line">            <span class="keyword">elif</span> i != <span class="number">0</span> <span class="keyword">and</span> j == <span class="number">0</span> : maps[i+j*m] = maps[i+j*m-<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">else</span>: maps[i+j*m] = (maps[i+j*m-<span class="number">1</span>] + maps[i+(j-<span class="number">1</span>)*m]) % <span class="number">1000000007</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> maps[m*n-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><br/><br/><h1 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h1><br/><p>DP로 풀어야 효율성 케이스를 통과할 수 있는 문제다.</p><p>divide and conquer를 이용한 재귀함수로 아주 간단히 풀 수 있지만, 효율성에서 통과되지 못했다.</p><p>메모리를 활용한 DP 풀이로 다시 풀었을때도 몇가지 케이스를 계속 틀렸는데, 전체 맵을 1로 셋팅하고 i==0 이거나 j==0 인 경우를 무시하고 지나가서 였다. </p><p>그러다보니 i==0 이거나 j==0 에서 생긴 웅덩이 다음 길에서 1로 값이 세팅되어 있는 문제점이 있었다. 이를 해결하기 위해 다시 0부터 모든 인덱스를 탐색하며 풀이했다.</p><p>간단하게 DP의 핵심 개념을 연습하기 좋은 문제다.</p>]]></content:encoded>
      
      
      <category domain="https://sklubmk.github.io/categories/TIL/">TIL</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/">프로그래머스</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/lv3/">lv3</category>
      
      
      <category domain="https://sklubmk.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sklubmk.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://sklubmk.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/">프로그래머스</category>
      
      <category domain="https://sklubmk.github.io/tags/python/">python</category>
      
      <category domain="https://sklubmk.github.io/tags/DP/">DP</category>
      
      <category domain="https://sklubmk.github.io/tags/lv3/">lv3</category>
      
      
      <comments>https://sklubmk.github.io/2021/07/07/01aa6c992450/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[프로그래머스] n진수 게임</title>
      <link>https://sklubmk.github.io/2021/07/07/8ff248f876f6/</link>
      <guid>https://sklubmk.github.io/2021/07/07/8ff248f876f6/</guid>
      <pubDate>Tue, 06 Jul 2021 17:44:59 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;JavaScript&lt;/p&gt;
&lt;blockquote&gt;
&lt;h6 id=&quot;문제-설명&quot;&gt;&lt;a href=&quot;#문제-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 설명&quot;&gt;&lt;/a&gt;문제 설명&lt;/h6&gt;&lt;h2 id=&quot;N진수-게임&quot;&gt;&lt;a href=&quot;#N진수-</description>
        
      
      
      
      <content:encoded><![CDATA[<p>JavaScript</p><blockquote><h6 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h6><h2 id="N진수-게임"><a href="#N진수-게임" class="headerlink" title="N진수 게임"></a>N진수 게임</h2><p>튜브가 활동하는 코딩 동아리에서는 전통적으로 해오는 게임이 있다. 이 게임은 여러 사람이 둥글게 앉아서 숫자를 하나씩 차례대로 말하는 게임인데, 규칙은 다음과 같다.</p><ol><li> 숫자를 0부터 시작해서 차례대로 말한다. 첫 번째 사람은 0, 두 번째 사람은 1, … 열 번째 사람은 9를 말한다.</li><li> 10 이상의 숫자부터는 한 자리씩 끊어서 말한다. 즉 열한 번째 사람은 10의 첫 자리인 1, 열두 번째 사람은 둘째 자리인 0을 말한다.</li></ol><p>이렇게 게임을 진행할 경우,<br><code>0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, ...</code><br>순으로 숫자를 말하면 된다.</p><p>한편 코딩 동아리 일원들은 컴퓨터를 다루는 사람답게 이진수로 이 게임을 진행하기도 하는데, 이 경우에는<br><code>0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, ...</code><br>순으로 숫자를 말하면 된다.</p><p>이진수로 진행하는 게임에 익숙해져 질려가던 사람들은 좀 더 난이도를 높이기 위해 이진법에서 십육진법까지 모든 진법으로 게임을 진행해보기로 했다. 숫자 게임이 익숙하지 않은 튜브는 게임에 져서 벌칙을 받는 굴욕을 피하기 위해, 자신이 말해야 하는 숫자를 스마트폰에 미리 출력해주는 프로그램을 만들려고 한다. 튜브의 프로그램을 구현하라.</p><h3 id="입력-형식"><a href="#입력-형식" class="headerlink" title="입력 형식"></a>입력 형식</h3><p>진법 <code>n</code>, 미리 구할 숫자의 갯수 <code>t</code>, 게임에 참가하는 인원 <code>m</code>, 튜브의 순서 <code>p</code> 가 주어진다.</p><ul><li>  2 ≦ <code>n</code> ≦ 16</li><li>  0 ＜ <code>t</code> ≦ 1000</li><li>  2 ≦ <code>m</code> ≦ 100</li><li>  1 ≦ <code>p</code> ≦ <code>m</code></li></ul><h3 id="출력-형식"><a href="#출력-형식" class="headerlink" title="출력 형식"></a>출력 형식</h3><p>튜브가 말해야 하는 숫자 <code>t</code>개를 공백 없이 차례대로 나타낸 문자열. 단, <code>10</code><del><code>15</code>는 각각 대문자 <code>A</code></del><code>F</code>로 출력한다.</p><h3 id="입출력-예제"><a href="#입출력-예제" class="headerlink" title="입출력 예제"></a>입출력 예제</h3><table><thead><tr><th>n</th><th>t</th><th>m</th><th>p</th><th>result</th></tr></thead><tbody><tr><td>2</td><td>4</td><td>2</td><td>1</td><td>“0111”</td></tr><tr><td>16</td><td>16</td><td>2</td><td>1</td><td>“02468ACE11111111”</td></tr><tr><td>16</td><td>16</td><td>2</td><td>2</td><td>“13579BDF01234567”</td></tr></tbody></table><p><a href="http://tech.kakao.com/2017/11/14/kakao-blind-recruitment-round-3/">해설 보러가기</a></p></blockquote><br/><br/><h1 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h1><h4 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">n, t, m, p</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> number_char = &#123;<span class="string">&#x27;10&#x27;</span>:<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;11&#x27;</span>:<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;12&#x27;</span>:<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;13&#x27;</span>:<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;14&#x27;</span>:<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;15&#x27;</span>:<span class="string">&#x27;F&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">const</span> setChange = <span class="function">(<span class="params">v, N</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(v === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> buffer = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span>(v &gt; <span class="number">0</span>)&#123;            </span><br><span class="line">            <span class="keyword">let</span> d = <span class="built_in">Math</span>.floor(v/N);</span><br><span class="line">            <span class="keyword">let</span> r = v % N;</span><br><span class="line">            v = d;</span><br><span class="line">            buffer += (r &lt; <span class="number">10</span> ? r : number_char[r+<span class="string">&#x27;&#x27;</span>])</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> buffer.split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> answer = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> calc_number = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> totalWords = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(answer.length &lt; t)&#123;</span><br><span class="line">        <span class="keyword">while</span>(totalWords.length &lt; m*i+p )&#123;</span><br><span class="line">            totalWords += setChange(calc_number,n)</span><br><span class="line">            calc_number++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        answer += totalWords[m*i+p-<span class="number">1</span>]</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h1 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h1><br/><p>가장 최근 본 코딩 테스트에서, 진법의 구현 문제가 나왔다.<br>언어에서 제공하는 함수들이 아니라 직접 N진법을 구현해야 했다.</p><p>그런데 오늘 우연히 고른 이 문제가 진법 구현을 다루고 있어 놀랐다.<br>이 문제 또한 N진법의 구현이 기본으로 시작된다.</p><p><code>javascript</code>는 <code>toString(N)</code>으로, <code>python</code>은 <code>bin</code>과 <code>hex</code> 함수로 진법을 쉽게 구현할 수 있다.<br>하지만 이런 문제를 통해 구현 능력을 연습해야 하기 때문에 다시 한 번 나는 N진법을 직접 구현해서 사용했다.</p><br/><p>이렇게 변환한 진법 값을 통해 전체 리스트에서 ‘튜브’가 뽑을 순서의 값을 반환하면 되는데,<br>순서는 규칙적으로 m(플레이 인원)번마다 돌아온다.</p><p>여기에 시작순서 p를 더해서, m*i + p의 값이 전체 리스트에서 튜브가 뽑아야할 값이 된다.</p><br/><p>그렇다면 전체 리스트는 어디까지 구해놔야 할까?   </p><p>나는 튜브가 뽑아야할 순서의 길이보다 작으면 새로 값을 붙여나가는 식으로 구현했고,<br>이 편이 메모리 낭비가 없는 방법이다.</p>]]></content:encoded>
      
      
      <category domain="https://sklubmk.github.io/categories/TIL/">TIL</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/">프로그래머스</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/lv2/">lv2</category>
      
      
      <category domain="https://sklubmk.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sklubmk.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://sklubmk.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/">프로그래머스</category>
      
      <category domain="https://sklubmk.github.io/tags/%EA%B5%AC%ED%98%84/">구현</category>
      
      <category domain="https://sklubmk.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://sklubmk.github.io/tags/N%EC%A7%84%EB%B2%95/">N진법</category>
      
      <category domain="https://sklubmk.github.io/tags/lv2/">lv2</category>
      
      
      <comments>https://sklubmk.github.io/2021/07/07/8ff248f876f6/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[프로그래머스] 3진법 뒤집기</title>
      <link>https://sklubmk.github.io/2021/07/07/4fddca29e2b8/</link>
      <guid>https://sklubmk.github.io/2021/07/07/4fddca29e2b8/</guid>
      <pubDate>Tue, 06 Jul 2021 17:44:59 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;3진법-뒤집기&quot;&gt;&lt;a href=&quot;#3진법-뒤집기&quot; class=&quot;headerlink&quot; title=&quot;3진법 뒤집기&quot;&gt;&lt;/a&gt;3진법 뒤집기&lt;/h1&gt;&lt;p&gt;JavaScript, Python&lt;/p&gt;
&lt;blockquote&gt;
&lt;h6 id=&quot;문제-설명&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="3진법-뒤집기"><a href="#3진법-뒤집기" class="headerlink" title="3진법 뒤집기"></a>3진법 뒤집기</h1><p>JavaScript, Python</p><blockquote><h6 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h6><p>자연수 n이 매개변수로 주어집니다. n을 3진법 상에서 앞뒤로 뒤집은 후, 이를 다시 10진법으로 표현한 수를 return 하도록 solution 함수를 완성해주세요.</p><hr><h5 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h5><ul><li>  n은 1 이상 100,000,000 이하인 자연수입니다.</li></ul><hr><h5 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h5><table><thead><tr><th>n</th><th>result</th></tr></thead><tbody><tr><td>45</td><td>7</td></tr><tr><td>125</td><td>229</td></tr></tbody></table><hr><h5 id="입출력-예-설명"><a href="#입출력-예-설명" class="headerlink" title="입출력 예 설명"></a>입출력 예 설명</h5><p>입출력 예 #1</p><ul><li>  답을 도출하는 과정은 다음과 같습니다.</li></ul><table><thead><tr><th>n (10진법)</th><th>n (3진법)</th><th>앞뒤 반전(3진법)</th><th>10진법으로 표현</th></tr></thead><tbody><tr><td>45</td><td>1200</td><td>0021</td><td>7</td></tr></tbody></table><ul><li>  따라서 7을 return 해야 합니다.</li></ul><p>입출력 예 #2</p><ul><li>  답을 도출하는 과정은 다음과 같습니다.</li></ul><table><thead><tr><th>n (10진법)</th><th>n (3진법)</th><th>앞뒤 반전(3진법)</th><th>10진법으로 표현</th></tr></thead><tbody><tr><td>125</td><td>11122</td><td>22111</td><td>229</td></tr></tbody></table><ul><li>  따라서 229를 return 해야 합니다.</li></ul></blockquote><h1 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h1><br/><h4 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> answer = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">toBaseThree</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> value = <span class="string">&#x27;&#x27;</span> </span><br><span class="line">        <span class="keyword">var</span> maxPow = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span>( num/(maxPow*<span class="number">3</span>) &gt;= <span class="number">1</span>)</span><br><span class="line">            maxPow *= <span class="number">3</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = maxPow; i&gt;=<span class="number">1</span>; i/=<span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> val = <span class="built_in">Math</span>.floor(num / i)</span><br><span class="line">            value += val</span><br><span class="line">            num %= i</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    toBaseThree(n).split(<span class="string">&#x27;&#x27;</span>).forEach(<span class="function">(<span class="params">v,i</span>)=&gt;</span>&#123;</span><br><span class="line">        answer += (v * <span class="built_in">Math</span>.pow(<span class="number">3</span>,i))</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> answer</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#### python</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>python</span><br><span class="line">def solution(n):</span><br><span class="line">    answer = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> n &gt;= <span class="number">1</span>:</span><br><span class="line">        n, d = divmod(n,<span class="number">3</span>)</span><br><span class="line">        answer += str(d)</span><br><span class="line">    answer = int(answer,<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><h1 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h1><br/><p>문제에서 요구되는 능력은 사용하는 언어의 진법 표현 방법을 아느냐(<code>python</code> 풀이)와 진법 변환을 직접 구현할 수 있느냐(<code>javascript</code> 풀이)이다. </p><p>자바스크립트로 풀때는 직접 진법 변환을 구현해보고 싶어서 위와같이 풀었고, 파이썬에서는 내장 함수를 이용했다. </p><p>javascript 또한 <code>toString()</code> 함수를 이용해 진법을 표현할 수 있다.</p><br/>]]></content:encoded>
      
      
      <category domain="https://sklubmk.github.io/categories/TIL/">TIL</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/">프로그래머스</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/lv1/">lv1</category>
      
      
      <category domain="https://sklubmk.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sklubmk.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://sklubmk.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/">프로그래머스</category>
      
      <category domain="https://sklubmk.github.io/tags/lv1/">lv1</category>
      
      <category domain="https://sklubmk.github.io/tags/%EA%B5%AC%ED%98%84/">구현</category>
      
      <category domain="https://sklubmk.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://sklubmk.github.io/tags/python/">python</category>
      
      <category domain="https://sklubmk.github.io/tags/N%EC%A7%84%EB%B2%95/">N진법</category>
      
      
      <comments>https://sklubmk.github.io/2021/07/07/4fddca29e2b8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[프로그래머스] H-Index</title>
      <link>https://sklubmk.github.io/2021/07/07/bfa41cde82fd/</link>
      <guid>https://sklubmk.github.io/2021/07/07/bfa41cde82fd/</guid>
      <pubDate>Tue, 06 Jul 2021 17:44:59 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;H-Index&quot;&gt;&lt;a href=&quot;#H-Index&quot; class=&quot;headerlink&quot; title=&quot;H-Index&quot;&gt;&lt;/a&gt;H-Index&lt;/h1&gt;&lt;p&gt;JavaScript, Python&lt;/p&gt;
&lt;blockquote&gt;
&lt;h6 id=&quot;문제-설명&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="H-Index"><a href="#H-Index" class="headerlink" title="H-Index"></a>H-Index</h1><p>JavaScript, Python</p><blockquote><h6 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h6><p>H-Index는 과학자의 생산성과 영향력을 나타내는 지표입니다. 어느 과학자의 H-Index를 나타내는 값인 h를 구하려고 합니다. 위키백과<a href="https://programmers.co.kr/learn/courses/30/lessons/42747#fn1">1</a>에 따르면, H-Index는 다음과 같이 구합니다.</p><p>어떤 과학자가 발표한 논문 <code>n</code>편 중, <code>h</code>번 이상 인용된 논문이 <code>h</code>편 이상이고 나머지 논문이 h번 이하 인용되었다면 <code>h</code>의 최댓값이 이 과학자의 H-Index입니다.</p><p>어떤 과학자가 발표한 논문의 인용 횟수를 담은 배열 citations가 매개변수로 주어질 때, 이 과학자의 H-Index를 return 하도록 solution 함수를 작성해주세요.</p><h5 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h5><ul><li>  과학자가 발표한 논문의 수는 1편 이상 1,000편 이하입니다.</li><li>  논문별 인용 횟수는 0회 이상 10,000회 이하입니다.</li></ul><h5 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h5><table><thead><tr><th>citations</th><th>return</th></tr></thead><tbody><tr><td>[3, 0, 6, 1, 5]</td><td>3</td></tr></tbody></table><h5 id="입출력-예-설명"><a href="#입출력-예-설명" class="headerlink" title="입출력 예 설명"></a>입출력 예 설명</h5><p>이 과학자가 발표한 논문의 수는 5편이고, 그중 3편의 논문은 3회 이상 인용되었습니다. 그리고 나머지 2편의 논문은 3회 이하 인용되었기 때문에 이 과학자의 H-Index는 3입니다.</p><p>※ 공지 - 2019년 2월 28일 테스트 케이스가 추가되었습니다.</p><hr><ol><li> <a href="https://en.wikipedia.org/wiki/H-index">https://en.wikipedia.org/wiki/H-index</a> “위키백과” <a href="https://programmers.co.kr/learn/courses/30/lessons/42747#fnref1">↩</a></li></ol></blockquote><br/><h1 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h1><br/><h4 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">citations</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> answer = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> sorted = citations.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>b-a)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; sorted.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(answer &gt; sorted[i])</span><br><span class="line">            <span class="keyword">return</span> answer;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            answer = (sorted[i] &lt;= (i+<span class="number">1</span>) ? sorted[i] : i+<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> answer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span>(<span class="params">citations</span>):</span></span><br><span class="line">    h = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">sorted</span>(citations,reverse=<span class="literal">True</span>)):</span><br><span class="line">        <span class="keyword">if</span> h &gt; c:</span><br><span class="line">            <span class="keyword">return</span> h</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            h = (c <span class="keyword">if</span> c &lt;= (i+<span class="number">1</span>) <span class="keyword">else</span> i+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> h</span><br></pre></td></tr></table></figure><br/><h1 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h1><br/><p>정렬(sort)하지 않고서는 O(N<sup>2</sup>)이상의 풀이 방법이 없었다.</p><p>배열을 내림정렬을 한 뒤, 앞에서 부터 index와 값을 비교하여 최대값을 갱신시켜주면 된다.</p><p>여기서 index는 자연스럽게 현재 값보다 같거나 큰 값들의 개수가 된다(정확히는 i+1이).</p><p>내가 염려했던 부분은 <code>[5,5,5,5,0]</code>와 같은 배열이었는데, 이 배열의 h값은 4가 나와야 한다.</p><p>즉, 배열에 포함되어 있지 않은 값으로도 h가 갱신되어야 한다.</p><p>따라서 index와 값을 비교하여 더 낮은 값으로 갱신을 진행했다.</p><p>정렬 한 뒤에는 O(N)풀이 인데, 평균적으로는 훨씬 적을 것으로 예상된다.</p><br/>]]></content:encoded>
      
      
      <category domain="https://sklubmk.github.io/categories/TIL/">TIL</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/">프로그래머스</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/lv2/">lv2</category>
      
      
      <category domain="https://sklubmk.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sklubmk.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://sklubmk.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/">프로그래머스</category>
      
      <category domain="https://sklubmk.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://sklubmk.github.io/tags/python/">python</category>
      
      <category domain="https://sklubmk.github.io/tags/lv2/">lv2</category>
      
      <category domain="https://sklubmk.github.io/tags/%EC%A0%95%EB%A0%AC/">정렬</category>
      
      
      <comments>https://sklubmk.github.io/2021/07/07/bfa41cde82fd/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[프로그래머스] 2016년</title>
      <link>https://sklubmk.github.io/2021/07/07/ccb820ca24a9/</link>
      <guid>https://sklubmk.github.io/2021/07/07/ccb820ca24a9/</guid>
      <pubDate>Tue, 06 Jul 2021 17:44:59 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;2016년&quot;&gt;&lt;a href=&quot;#2016년&quot; class=&quot;headerlink&quot; title=&quot;2016년&quot;&gt;&lt;/a&gt;2016년&lt;/h1&gt;&lt;p&gt;JavaScript, Python&lt;/p&gt;
&lt;blockquote&gt;
&lt;h6 id=&quot;문제-설명&quot;&gt;&lt;a href</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="2016년"><a href="#2016년" class="headerlink" title="2016년"></a>2016년</h1><p>JavaScript, Python</p><blockquote><h6 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h6><p>2016년 1월 1일은 금요일입니다. 2016년 a월 b일은 무슨 요일일까요? 두 수 a ,b를 입력받아 2016년 a월 b일이 무슨 요일인지 리턴하는 함수, solution을 완성하세요. 요일의 이름은 일요일부터 토요일까지 각각 <code>SUN,MON,TUE,WED,THU,FRI,SAT</code></p><p>입니다. 예를 들어 a=5, b=24라면 5월 24일은 화요일이므로 문자열 “TUE”를 반환하세요.</p><h5 id="제한-조건"><a href="#제한-조건" class="headerlink" title="제한 조건"></a>제한 조건</h5><ul><li>  2016년은 윤년입니다.</li><li>  2016년 a월 b일은 실제로 있는 날입니다. (13월 26일이나 2월 45일같은 날짜는 주어지지 않습니다)</li></ul><h4 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h4><table><thead><tr><th>a</th><th>b</th><th>result</th></tr></thead><tbody><tr><td>5</td><td>24</td><td>“TUE”</td></tr></tbody></table></blockquote><br/><h1 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h1><br/><h4 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> daysOfMonth = [<span class="number">31</span>,<span class="number">29</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>]</span><br><span class="line">    <span class="keyword">var</span> days = [<span class="string">&quot;FRI&quot;</span>,<span class="string">&quot;SAT&quot;</span>,<span class="string">&quot;SUN&quot;</span>,<span class="string">&quot;MON&quot;</span>,<span class="string">&quot;TUE&quot;</span>,<span class="string">&quot;WED&quot;</span>,<span class="string">&quot;THU&quot;</span>]</span><br><span class="line">    <span class="keyword">var</span> getDaySum = <span class="function">(<span class="params">index</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">            result += daysOfMonth[i]</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> days[ (getDaySum(a-<span class="number">1</span>) + b-<span class="number">1</span>) % <span class="number">7</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Date-클래스-이용-풀이"><a href="#Date-클래스-이용-풀이" class="headerlink" title="Date 클래스 이용 풀이"></a>Date 클래스 이용 풀이</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2016</span>, (a - <span class="number">1</span>), b);</span><br><span class="line">    <span class="keyword">return</span> date.toString().slice(<span class="number">0</span>, <span class="number">3</span>).toUpperCase();</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#### python</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>python</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">def solution(a, b):</span><br><span class="line">    d = datetime.datetime(<span class="number">2016</span>,a,b) - datetime.datetime(<span class="number">2016</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> (<span class="string">&#x27;FRI&#x27;</span>,<span class="string">&#x27;SAT&#x27;</span>,<span class="string">&#x27;SUN&#x27;</span>,<span class="string">&#x27;MON&#x27;</span>,<span class="string">&#x27;TUE&#x27;</span>,<span class="string">&#x27;WED&#x27;</span>,<span class="string">&#x27;THU&#x27;</span>)[d.days % <span class="number">7</span>]</span><br><span class="line">    </span><br></pre></td></tr></table></figure><br/><h1 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h1><br/><p>기본적인 Date 객체 활용 문제다. 해당 문제는 실제 날짜를 활용했기 때문에 가볍게 Date 객체를 활용하여 풀 수 있다.(2번째, 3번째 풀이)</p><p>그러나 가끔 등장하는 가상의 날짜를 이용한 문제를 맞이하면 단순히 Date 객체를 활용하여 문제를 풀기 어려울 수 있다. (30일로만 이루어진 달, 가상의 윤달 및 윤년 설정 등)</p><p>따라서 직접 달마다 날짜 수를 설정해 문제를 푸는 방법을 연습해둬야 한다(1번째 풀이)</p><br/>]]></content:encoded>
      
      
      <category domain="https://sklubmk.github.io/categories/TIL/">TIL</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/">프로그래머스</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/lv1/">lv1</category>
      
      
      <category domain="https://sklubmk.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sklubmk.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://sklubmk.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/">프로그래머스</category>
      
      <category domain="https://sklubmk.github.io/tags/lv1/">lv1</category>
      
      <category domain="https://sklubmk.github.io/tags/%EA%B5%AC%ED%98%84/">구현</category>
      
      <category domain="https://sklubmk.github.io/tags/Date/">Date</category>
      
      <category domain="https://sklubmk.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://sklubmk.github.io/tags/python/">python</category>
      
      
      <comments>https://sklubmk.github.io/2021/07/07/ccb820ca24a9/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[프로그래머스] 영어 끝말잇기</title>
      <link>https://sklubmk.github.io/2021/07/07/e2ef0d0b100a/</link>
      <guid>https://sklubmk.github.io/2021/07/07/e2ef0d0b100a/</guid>
      <pubDate>Tue, 06 Jul 2021 17:44:59 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;영어-끝말잇기&quot;&gt;&lt;a href=&quot;#영어-끝말잇기&quot; class=&quot;headerlink&quot; title=&quot;영어 끝말잇기&quot;&gt;&lt;/a&gt;영어 끝말잇기&lt;/h1&gt;&lt;p&gt;JavaScript, Python&lt;/p&gt;
&lt;blockquote&gt;
&lt;h6 id=&quot;문제-설명&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="영어-끝말잇기"><a href="#영어-끝말잇기" class="headerlink" title="영어 끝말잇기"></a>영어 끝말잇기</h1><p>JavaScript, Python</p><blockquote><h6 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h6><p>1부터 n까지 번호가 붙어있는 n명의 사람이 영어 끝말잇기를 하고 있습니다. 영어 끝말잇기는 다음과 같은 규칙으로 진행됩니다. </p><ol><li> 1번부터 번호 순서대로 한 사람씩 차례대로 단어를 말합니다. </li><li> 마지막 사람이 단어를 말한 다음에는 다시 1번부터 시작합니다. </li><li> 앞사람이 말한 단어의 마지막 문자로 시작하는 단어를 말해야 합니다. </li><li> 이전에 등장했던 단어는 사용할 수 없습니다. </li><li> 한 글자인 단어는 인정되지 않습니다. </li></ol><p>다음은 3명이 끝말잇기를 하는 상황을 나타냅니다. </p><p>tank → kick → know → wheel → land → dream → mother → robot → tank</p><p>위 끝말잇기는 다음과 같이 진행됩니다.</p><ul><li>  1번 사람이 자신의 첫 번째 차례에 tank를 말합니다.</li><li>  2번 사람이 자신의 첫 번째 차례에 kick을 말합니다.</li><li>  3번 사람이 자신의 첫 번째 차례에 know를 말합니다.</li><li>  1번 사람이 자신의 두 번째 차례에 wheel을 말합니다.</li><li>  (계속 진행)</li></ul><p>끝말잇기를 계속 진행해 나가다 보면, 3번 사람이 자신의 세 번째 차례에 말한 tank 라는 단어는 이전에 등장했던 단어이므로 탈락하게 됩니다. </p><p>사람의 수 n과 사람들이 순서대로 말한 단어 words 가 매개변수로 주어질 때, 가장 먼저 탈락하는 사람의 번호와 그 사람이 자신의 몇 번째 차례에 탈락하는지를 구해서 return 하도록 solution 함수를 완성해주세요.</p><h5 id="제한-사항"><a href="#제한-사항" class="headerlink" title="제한 사항"></a>제한 사항</h5><ul><li>  끝말잇기에 참여하는 사람의 수 n은 2 이상 10 이하의 자연수입니다.</li><li>  words는 끝말잇기에 사용한 단어들이 순서대로 들어있는 배열이며, 길이는 n 이상 100 이하입니다.</li><li>  단어의 길이는 2 이상 50 이하입니다.</li><li>  모든 단어는 알파벳 소문자로만 이루어져 있습니다.</li><li>  끝말잇기에 사용되는 단어의 뜻(의미)은 신경 쓰지 않으셔도 됩니다.</li><li>  정답은 [ 번호, 차례 ] 형태로 return 해주세요.</li><li>  만약 주어진 단어들로 탈락자가 생기지 않는다면, [0, 0]을 return 해주세요.</li></ul><hr><h5 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h5><table><thead><tr><th>n</th><th>words</th><th>result</th></tr></thead><tbody><tr><td>3</td><td>[“tank”, “kick”, “know”, “wheel”, “land”, “dream”, “mother”, “robot”, “tank”]</td><td>[3,3]</td></tr><tr><td>5</td><td>[“hello”, “observe”, “effect”, “take”, “either”, “recognize”, “encourage”, “ensure”, “establish”, “hang”, “gather”, “refer”, “reference”, “estimate”, “executive”]</td><td>[0,0]</td></tr><tr><td>2</td><td>[“hello”, “one”, “even”, “never”, “now”, “world”, “draw”]</td><td>[1,3]</td></tr></tbody></table><h5 id="입출력-예-설명"><a href="#입출력-예-설명" class="headerlink" title="입출력 예 설명"></a>입출력 예 설명</h5><p>입출력 예 #1<br>3명의 사람이 끝말잇기에 참여하고 있습니다.</p><ul><li>  1번 사람 : tank, wheel, mother</li><li>  2번 사람 : kick, land, robot</li><li>  3번 사람 : know, dream, <code>tank</code></li></ul><p>와 같은 순서로 말을 하게 되며, 3번 사람이 자신의 세 번째 차례에 말한 <code>tank</code>라는 단어가 1번 사람이 자신의 첫 번째 차례에 말한 <code>tank</code>와 같으므로 3번 사람이 자신의 세 번째 차례로 말을 할 때 처음 탈락자가 나오게 됩니다.</p><p>입출력 예 #2<br>5명의 사람이 끝말잇기에 참여하고 있습니다.</p><ul><li>  1번 사람 : hello, recognize, gather</li><li>  2번 사람 : observe, encourage, refer</li><li>  3번 사람 : effect, ensure, reference</li><li>  4번 사람 : take, establish, estimate</li><li>  5번 사람 : either, hang, executive</li></ul><p>와 같은 순서로 말을 하게 되며, 이 경우는 주어진 단어로만으로는 탈락자가 발생하지 않습니다. 따라서 [0, 0]을 return하면 됩니다.</p><p>입출력 예 #3<br>2명의 사람이 끝말잇기에 참여하고 있습니다.</p><ul><li>  1번 사람 : hello, even, <code>now</code>, draw</li><li>  2번 사람 : one, never, world</li></ul><p>와 같은 순서로 말을 하게 되며, 1번 사람이 자신의 세 번째 차례에 ‘r’로 시작하는 단어 대신, n으로 시작하는 <code>now</code>를 말했기 때문에 이때 처음 탈락자가 나오게 됩니다</p></blockquote><br/><br/><h1 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h1><br/><h4 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">n, words</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> dict = &#123;&#125;</span><br><span class="line">    dict[words[<span class="number">0</span>]] = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> isRight = <span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;<span class="keyword">return</span> a[a.length-<span class="number">1</span>] !== b[<span class="number">0</span>]&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; words.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(dict[words[i]] || isRight(words[i-<span class="number">1</span>], words[i]))&#123;</span><br><span class="line">            <span class="keyword">return</span> [(i % n)+<span class="number">1</span>,<span class="built_in">Math</span>.ceil((i+<span class="number">1</span>) / n)]</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            dict[words[i]] = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="python"><a href="#python" class="headerlink" title="python"></a>python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span>(<span class="params">n, words</span>):</span></span><br><span class="line">    dict_ = &#123;&#125;</span><br><span class="line">    dict_[words[<span class="number">0</span>]] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(words)):</span><br><span class="line">        <span class="keyword">if</span> words[i-<span class="number">1</span>][-<span class="number">1</span>] != words[i][<span class="number">0</span>] <span class="keyword">or</span> words[i] <span class="keyword">in</span> dict_:</span><br><span class="line">            <span class="keyword">return</span> [(i % n)+<span class="number">1</span>, math.ceil((i+<span class="number">1</span>)/n)]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dict_[words[i]] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="number">0</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure><br/><br/><h1 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h1><br/><p>Dictionary를 사용하면 손쉽게 풀 수 있는 문제다.</p><p>javascript에서는 a, b 를 비교하는 reduce 형식으로 풀었고, 파이썬은 이러한 기능이 있긴 하지만 인덱스로 처리하는 편이 더 편하고 깔끔했다.</p><p>하지만 이 때 이전 인덱스와 비교해야 하므로 첫 노드는 건너뛰어야 한다. 그래서 word의 첫 값을 미리 Dict에 넣어 두어야 한다.</p>]]></content:encoded>
      
      
      <category domain="https://sklubmk.github.io/categories/TIL/">TIL</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/">프로그래머스</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/lv2/">lv2</category>
      
      
      <category domain="https://sklubmk.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sklubmk.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://sklubmk.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/">프로그래머스</category>
      
      <category domain="https://sklubmk.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://sklubmk.github.io/tags/python/">python</category>
      
      <category domain="https://sklubmk.github.io/tags/lv2/">lv2</category>
      
      
      <comments>https://sklubmk.github.io/2021/07/07/e2ef0d0b100a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[프로그래머스] 정수 삼각형</title>
      <link>https://sklubmk.github.io/2021/07/06/107fd7949260/</link>
      <guid>https://sklubmk.github.io/2021/07/06/107fd7949260/</guid>
      <pubDate>Mon, 05 Jul 2021 15:23:14 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;정수-삼각형&quot;&gt;&lt;a href=&quot;#정수-삼각형&quot; class=&quot;headerlink&quot; title=&quot;정수 삼각형&quot;&gt;&lt;/a&gt;정수 삼각형&lt;/h1&gt;&lt;p&gt;Python3&lt;/p&gt;
&lt;blockquote&gt;
&lt;h6 id=&quot;문제-설명&quot;&gt;&lt;a href=&quot;#문제-설</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="정수-삼각형"><a href="#정수-삼각형" class="headerlink" title="정수 삼각형"></a>정수 삼각형</h1><p>Python3</p><blockquote><h6 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h6><p><img src="https://grepp-programmers.s3.amazonaws.com/files/production/97ec02cc39/296a0863-a418-431d-9e8c-e57f7a9722ac.png" alt="스크린샷 2018-09-14 오후 5.44.19.png"></p><p>위와 같은 삼각형의 꼭대기에서 바닥까지 이어지는 경로 중, 거쳐간 숫자의 합이 가장 큰 경우를 찾아보려고 합니다. 아래 칸으로 이동할 때는 대각선 방향으로 한 칸 오른쪽 또는 왼쪽으로만 이동 가능합니다. 예를 들어 3에서는 그 아래칸의 8 또는 1로만 이동이 가능합니다.</p><p>삼각형의 정보가 담긴 배열 triangle이 매개변수로 주어질 때, 거쳐간 숫자의 최댓값을 return 하도록 solution 함수를 완성하세요.</p><h5 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h5><ul><li>  삼각형의 높이는 1 이상 500 이하입니다.</li><li>  삼각형을 이루고 있는 숫자는 0 이상 9,999 이하의 정수입니다.</li></ul><h5 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h5><table><thead><tr><th>triangle</th><th>result</th></tr></thead><tbody><tr><td>[[7], [3, 8], [8, 1, 0], [2, 7, 4, 4], [4, 5, 2, 6, 5]]</td><td>30</td></tr></tbody></table><p><a href="http://stats.ioinformatics.org/countries/SWE">출처</a></p></blockquote><br/><br/><h1 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h1><br/><h4 id="python"><a href="#python" class="headerlink" title="python"></a>python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span>(<span class="params">triangle</span>):</span></span><br><span class="line">    t = triangle</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(t)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(t[i])):</span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt; j &lt; <span class="built_in">len</span>(t[i])-<span class="number">1</span>:t[i][j]+= <span class="built_in">max</span>(t[i-<span class="number">1</span>][j-<span class="number">1</span>], t[i-<span class="number">1</span>][j])</span><br><span class="line">            <span class="keyword">elif</span> j == <span class="number">0</span>: t[i][j] += t[i-<span class="number">1</span>][j]</span><br><span class="line">            <span class="keyword">else</span> : t[i][j] += t[i-<span class="number">1</span>][j-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(t[-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><br/><br/><h1 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h1><br/><p>DP 유형의 기본 예제.</p><p>배열의 반복문을 돌며 윗 층에서 내려올 수 있는 두 방향 왼쪽과 오른쪽 중 큰 값을 더하며 내려간다.  </p><p>이를통해 현재 기준 최대의 값을 할당할 수 있고, 계산이 끝난 뒤 마지막 배열에서 최대값을 찾으면 된다.</p>]]></content:encoded>
      
      
      <category domain="https://sklubmk.github.io/categories/TIL/">TIL</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/">프로그래머스</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/lv3/">lv3</category>
      
      
      <category domain="https://sklubmk.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sklubmk.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://sklubmk.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/">프로그래머스</category>
      
      <category domain="https://sklubmk.github.io/tags/python/">python</category>
      
      <category domain="https://sklubmk.github.io/tags/DP/">DP</category>
      
      <category domain="https://sklubmk.github.io/tags/lv3/">lv3</category>
      
      
      <comments>https://sklubmk.github.io/2021/07/06/107fd7949260/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[프로그래머스] n으로 표현</title>
      <link>https://sklubmk.github.io/2021/07/04/ba636797c35b/</link>
      <guid>https://sklubmk.github.io/2021/07/04/ba636797c35b/</guid>
      <pubDate>Sun, 04 Jul 2021 14:57:27 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;N으로-표현&quot;&gt;&lt;a href=&quot;#N으로-표현&quot; class=&quot;headerlink&quot; title=&quot;N으로 표현&quot;&gt;&lt;/a&gt;N으로 표현&lt;/h1&gt;&lt;p&gt;Python3&lt;/p&gt;
&lt;blockquote&gt;
&lt;h6 id=&quot;문제-설명&quot;&gt;&lt;a href=&quot;#문제-설</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="N으로-표현"><a href="#N으로-표현" class="headerlink" title="N으로 표현"></a>N으로 표현</h1><p>Python3</p><blockquote><h6 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h6><p>아래와 같이 5와 사칙연산만으로 12를 표현할 수 있습니다.</p><p>12 = 5 + 5 + (5 / 5) + (5 / 5)<br>12 = 55 / 5 + 5 / 5<br>12 = (55 + 5) / 5</p><p>5를 사용한 횟수는 각각 6,5,4 입니다. 그리고 이중 가장 작은 경우는 4입니다.<br>이처럼 숫자 N과 number가 주어질 때, N과 사칙연산만 사용해서 표현 할 수 있는 방법 중 N 사용횟수의 최솟값을 return 하도록 solution 함수를 작성하세요.</p><h5 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h5><ul><li>  N은 1 이상 9 이하입니다.</li><li>  number는 1 이상 32,000 이하입니다.</li><li>  수식에는 괄호와 사칙연산만 가능하며 나누기 연산에서 나머지는 무시합니다.</li><li>  최솟값이 8보다 크면 -1을 return 합니다.</li></ul><h5 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h5><table><thead><tr><th>N</th><th>number</th><th>return</th></tr></thead><tbody><tr><td>5</td><td>12</td><td>4</td></tr><tr><td>2</td><td>11</td><td>3</td></tr></tbody></table><h5 id="입출력-예-설명"><a href="#입출력-예-설명" class="headerlink" title="입출력 예 설명"></a>입출력 예 설명</h5><p>예제 #1<br>문제에 나온 예와 같습니다.</p><p>예제 #2<br><code>11 = 22 / 2</code>와 같이 2를 3번만 사용하여 표현할 수 있습니다.</p><p><a href="https://www.oi.edu.pl/old/php/show.php?ac=e181413&module=show&file=zadania/oi6/monocyfr">출처</a></p><p>※ 공지 - 2020년 9월 3일 테스트케이스가 추가되었습니다.</p></blockquote><br/><br/><h1 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h1><br/><h4 id="python"><a href="#python" class="headerlink" title="python"></a>python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">answer = -<span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span>(<span class="params">N, number</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sol</span>(<span class="params">count, result</span>):</span></span><br><span class="line">        <span class="keyword">global</span> answer</span><br><span class="line">        temp = N</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> count &gt; <span class="number">8</span> : <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> result == number :</span><br><span class="line">            <span class="keyword">if</span> answer &gt; count <span class="keyword">or</span> answer == -<span class="number">1</span>:</span><br><span class="line">                answer = count</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>-count):</span><br><span class="line">            </span><br><span class="line">            sol(count+i+<span class="number">1</span>, result + temp)</span><br><span class="line">            sol(count+i+<span class="number">1</span>, result - temp)</span><br><span class="line">            sol(count+i+<span class="number">1</span>, result * temp)</span><br><span class="line">            sol(count+i+<span class="number">1</span>, <span class="built_in">int</span>(result / temp))</span><br><span class="line">            </span><br><span class="line">            temp = (temp * <span class="number">10</span>) + N</span><br><span class="line">            </span><br><span class="line">    sol(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><br/><br/><h1 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h1><br/><p>난이도 3의 DP(Dynamic Programming, 동적 계획법) 문제다.<br>처음 접했을때 약 4번이나 풀이 방법을 바꿔가며 풀어봤지만 모두 실패했다.</p><br/><p>처음엔 BFS 처럼 사칙연산 기호들을 이어붙이는 식으로 풀이를 해보려 했다가 낭패를 봤다.</p><br/><p>두 번째에는 딕셔너리를 활용해 연산값을 계속 저장하며 문제를 풀어보려 시도했다. 결과는 역시나 실패. 테스트 케이스 몇 개가 끝까지 해결이 안되었다. 여기서 괄호의 개념을 도입해야 한다는 판단이 들었는데, 이마저 BFS 형식으로 구현하면 시간초과가 날 것이 분명했다. 또한 풀이때 연산 방향에 신경썼는데 지금 생각해보면 전혀 필요 없는 부분이라 그땐 왜 그랬는지 모르겠다. 집중력이 저하된 것 같다.</p><br/><p>세 번째 방법은 위에서 쓴 딕셔너리 내의 두 값을 자발적으로 비교하는 방식으로 진행했다. 역시나 풀리지 않는 테스트 케이스들과 시간 초과로 실패했다. 이론상 N값을 이용해 4번의 사칙연산 결과만 저장해 놓으면, 나머지 값들의 비교로 최대 8의 결과값을 구할 수 있다. 그러나 4번째의 딕셔너리 연산이 시간초과를 불러왔다.</p><br/><p>네 번째 방법은 위 세 번째 방법과 네 번째 방법을 합쳐서 활용했는데, 풀면서도 절대로 이런식의 풀이가 성공할리 없다는 확신이 들었다. 풀이가 구질구질(?)해지면 거진 실패를 했기 때문에, 그 감정이 스멀스멀 올라오기 시작했을때 손을 놓고 다른 방법을 강구했다.</p><br/><p>결국 해법은 비슷한 유형의 문제 풀이를 보고 찾을 수 있었다. 사실 구현 자체만 보면 모든 부분을 탐색하기 때문에 BFS 풀이의 느낌이 강하다.</p><br/><p>핵심은 temp 변수에 있다. 두 값을 단순히 붙이는 방법을 자리수 이동으로 해결하고, 이를 연산의 한 방법으로 사용한 것이 굉장히 창의적이여서 이해하기 힘든 부분이었다. 풀이 과정이 간단하니 코드 또한 훨씬 줄고 깔끔해졌다. 두고두고 다시 봐야할 풀이 같다.</p><br/><br/>]]></content:encoded>
      
      
      <category domain="https://sklubmk.github.io/categories/TIL/">TIL</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/">프로그래머스</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/lv3/">lv3</category>
      
      
      <category domain="https://sklubmk.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sklubmk.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://sklubmk.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/">프로그래머스</category>
      
      <category domain="https://sklubmk.github.io/tags/python/">python</category>
      
      <category domain="https://sklubmk.github.io/tags/DP/">DP</category>
      
      <category domain="https://sklubmk.github.io/tags/lv3/">lv3</category>
      
      
      <comments>https://sklubmk.github.io/2021/07/04/ba636797c35b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>외장하드 오류코드-36 해결법 (Fix Drive Error Code-36 in Mac)</title>
      <link>https://sklubmk.github.io/2021/06/30/2e9ce59f5c23/</link>
      <guid>https://sklubmk.github.io/2021/06/30/2e9ce59f5c23/</guid>
      <pubDate>Wed, 30 Jun 2021 12:22:22 GMT</pubDate>
      
        
        
      <description>&lt;p align=&quot;center&quot;&gt;
    &lt;img alt=&quot;error code-36&quot; src=&quot;/img/post_images/etc/error36.png&quot;&gt;
&lt;/p&gt;

&lt;br/&gt;

&lt;h1 id=&quot;선-요약&quot;&gt;&lt;a href=&quot;#선-요약&quot; class=&quot;he</description>
        
      
      
      
      <content:encoded><![CDATA[<p align="center">    <img alt="error code-36" src="/img/post_images/etc/error36.png"></p><br/><h1 id="선-요약"><a href="#선-요약" class="headerlink" title="선 요약"></a>선 요약</h1><br/><p>❓❓❓ Problem ❓❓❓</p><blockquote><ul><li>맥북과 윈도우를 오가며 공용으로 사용하던 NTFS 포맷의 외장하드에서 오류 발생 (mac)</li><li>파일 이동이 불가능한 현상 <code>(Error Code - 36)</code></li></ul></blockquote><br/><p>❕❕❕ Solution ❕❕❕</p><blockquote><p>❌ <code>dot_clean</code> 명령어 사용했으나 실패, 이후 설정 폴더들 사라지는 추가 문제 발생<br>❌ 파일 복구 시스템(disk drill, easyUS, etc .. ) 사용 -&gt; 온전히 복구 실패<br>✅ <code>windows OS</code> cmd 에서 <span style="color:red">chkdsk</span>로 해결</p></blockquote><br/><br/><h1 id="문제-발생"><a href="#문제-발생" class="headerlink" title="문제 발생"></a>문제 발생</h1><br/><p><code>Mac</code>과 <code>Windows</code> 를 동시에 사용하는 나는, 두 데스크탑에서 데이터를 공유하기 위해 USB 허브에 외장 드라이브를 물려 사용해왔다. 처음에 맥에서 외장하드를 연결했을때, 윈도우에서 사용하던 드라이브의 사용이 불가능 했다. 그 이유는 드라이브의 <code>파일 시스템</code> 때문이었다. 기존 사용하던 <code>FAT32</code> 파일 시스템이 맥에서는 사용이 안됐기 때문에, 어쩔 수 없이 <code>NTFS</code>로 포멧하여 사용해야 했다.</p><br/><br/><h2 id="❗️-Error-Code-36"><a href="#❗️-Error-Code-36" class="headerlink" title="❗️ Error Code 36"></a>❗️ Error Code 36</h2><blockquote><h3 id="The-Finder-can’t-complete-the-operation-because-some-data-in-“FileName”-can’t-be-read-or-written-Error-code-36"><a href="#The-Finder-can’t-complete-the-operation-because-some-data-in-“FileName”-can’t-be-read-or-written-Error-code-36" class="headerlink" title="The Finder can’t complete the operation because some data in “FileName” can’t be read or written. (Error code -36)"></a>The Finder can’t complete the operation because some data in “FileName” can’t be read or written. (Error code -36)</h3></blockquote><br/><p>그런데 어느 날 Mac에서 작성한 작업 파일이 드라이브에 복사가 되지 않았다.<br>문제는 error code 36이었다.</p><p>오류 코드 36은 맥 OS에서 자주 발생하는 나름 악명높은(?) 오류였다.</p><p>간단히 설명하면 NTFS 파일 시스템의 드라이브를 맥에서 이용할 때, 드라이브가 꼬이는 문제였다.<br>백업 전용 드라이브라 파일을 반드시 저장해야 하는데, 파일이 이동되지 않으니 참으로 난감한 상황이었다.</p><p><span style="color:#f46049"><em>이때 그냥 윈도우로 옮겨 저장했어야 했는데…</em></span> 🤔</p><p>당시엔 단순히 <strong>가벼운 오류</strong>라 생각해서 맥에서 이를 해결해보려 했다.</p><br/><br/><h2 id="시행착오"><a href="#시행착오" class="headerlink" title="시행착오"></a>시행착오</h2><br/><p>처음 구글링을 통해 시행한 방법은 <code>dot_clean</code> 이었다.<br>특정 macOS 파일을 HFS+/APFS 형식이 지정되지 않은 디스크(예: 파일 공유)에 복사하면 메타데이터가 파일에서 추출되어 dot(‘._’)로 시작하는 보이지 않는 파일에 넣는다고 한다.  </p><p>이런 숨겨진 시스템 파일을 전송하려는 시도에서 Error Code-36이 자주 발생한다고 한다.<br>이 dot 파일들을 쉽게 정리하는 명령어가 바로 <code>dot_clean</code> 이다.<br>이는 단순 파일 삭제가 아니라 원본과 병합하는 과정을 거치기 때문에 안전(?)하다고 한다.  </p><p>사용 방법은 간단하다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dot_clean /Volumes/MY_VOLUME_PATH</span><br></pre></td></tr></table></figure><p>파일 이동이 안되는 드라이브의 경로를 입력해주면 된다.<br>그런데 나는 이때 딱히 변화를 감지하지 못했다.</p><p>그래서 볼륨의 루트 경로 한 번, 문제되는 폴더 경로 한 번.<br>총 2번의 <code>dot_clean</code>을 시행했다.<br>사실 각각 시행해도 달라지는건 없었다.  </p><p>문제는 연결을 잠시 해제(안전하게)하고 난 뒤였다.  </p><p>폴더 내부 파일의 <strong>절반</strong>이 날아가버린 것이다.</p><br/><br/><h2 id="이어지는-뻘짓"><a href="#이어지는-뻘짓" class="headerlink" title="이어지는 뻘짓"></a>이어지는 뻘짓</h2><br/><p>처음엔 너무 당황스러웠다. 마치 약을 먹었는데 그게 더 독이 되어버린 경우였다. </p><p>충분히 의심되는 여러 증상들(새 폴더를 생성하면 순식간에 Finder에서 사라지는 등)이 있었지만, 내 머릿속에는 따로 백업도 안된 채 날아간 중요 파일들에대한 걱정 뿐이였다. </p><p>나는 결국 데이터 복구 프로그램을 찾기 시작했다.</p><p>일단 시중의 Mac용 Drive 복구 프로그램중 제일 유명해보이는 Disk drill과 easyUS, 기타 이름모를 복구 프로그램들을 닥치는대로 받아가며 복구가 가능한지 시도해봤다.</p><p>그 중 가장 유의미하게 복구가 가능한 것으로 보여지는 것은 Disk drill이었다.<br>그러나 그 마저도 잃어버린 50% 파일 중 20%정도 남짓에 불과했다.<br>그 20% 안에는 중요 계약 서류들이 있어서 이것을 돈주고 복구해야 하는지 내적고민을 엄청나게 했다.</p><p>약 10만원 가량의 비용이었기 때문에 정말 앉아서 돈을 잃는 경우라고 생각했고, 조금은 이성을 되찾기로 했다.</p><p>이어지는 고민과 명상 도중 드는 생각은 Mac은 왜이렇게 불안정할까 였다.<br>윈도우에선 이런일이 없었는디… 라는 생각이 들었고,<br>이 흐름은 마침내 Windows의 chkdsk 기능으로 도달했다.</p><h4 id="🔥아-맞다-그런게-있었지-🔥"><a href="#🔥아-맞다-그런게-있었지-🔥" class="headerlink" title=" 🔥아 맞다 그런게 있었지!!!!! 🔥"></a><span style="color:rgb(220,60,70)"> 🔥아 맞다 그런게 있었지!!!!! 🔥</span></h4><br/><h2 id="CHKDSK로-해결"><a href="#CHKDSK로-해결" class="headerlink" title="CHKDSK로 해결"></a>CHKDSK로 해결</h2><br/><p>Windows의 CHKDSK 기능은 정말 막강하다.</p><p>CHKDSK는 다양한 메모리 관련 문제를 예방하고 해결하기 위한 윈도우의 자체적인 기능이다.<br>드라이브 포멧을 하던 중 이상이 생겼을 때도, 이 CHKDSK 기능을 활용하여 고쳤던 기억이 났다.</p><p>사용법 또한 간단하다. CMD 창을 켠 후</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chkdsk DRIVE_PATH /f /r</span><br><span class="line"><span class="meta">#</span><span class="bash"> DRIVE_PATH 는 자신의 볼륨 주소 (D:, F: 등)</span></span><br></pre></td></tr></table></figure><p>를 입력하면 된다.</p><blockquote><p>/f는 디스크에 있는 파일 시스템 오류를 자동으로 수정한다. (빠르다)</p></blockquote><blockquote><p>/r은 불량 섹터를 검사하고 발견되면 복구를 시도한다.<br>작업시간이 매우 느리므로 주의 ❗ ️(수 시간 소요, 도중 취소 불가)</p></blockquote><br/><br/><p><img src="/img/post_images/etc/feelsogood.jpg"></p><br/><p>이 작업을 하자 거짓말처럼 드라이브가 깨끗히 복구되었고,<br>심지어 맥에서 생성한 빈 폴더마저 나타났다.</p><p>이 문제 때문에 몇 시간을 골머리 썩히며 고생했지만,<br>정말 다행인 점은 복구 프로그램을 결제하지 않았다는 사실이다.</p><p>요즘 맥을 메인으로 사용하다보니 이러한 메모리 관련 문제가 자주 발생하는데,<br>그때 마다 정말 윈도우가 선녀였다는 생각이 들곤 한다.</p><br/>]]></content:encoded>
      
      
      <category domain="https://sklubmk.github.io/categories/%EB%94%94%EB%B2%84%EA%B9%85/">디버깅</category>
      
      <category domain="https://sklubmk.github.io/categories/%EB%94%94%EB%B2%84%EA%B9%85/%EA%B8%B0%ED%83%80-%EC%98%A4%EB%A5%98/">기타 오류</category>
      
      
      <category domain="https://sklubmk.github.io/tags/Error/">Error</category>
      
      <category domain="https://sklubmk.github.io/tags/Mac/">Mac</category>
      
      <category domain="https://sklubmk.github.io/tags/%EB%94%94%EB%B2%84%EA%B9%85/">디버깅</category>
      
      <category domain="https://sklubmk.github.io/tags/Drive/">Drive</category>
      
      <category domain="https://sklubmk.github.io/tags/Code-36/">Code-36</category>
      
      
      <comments>https://sklubmk.github.io/2021/06/30/2e9ce59f5c23/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[프로그래머스] 행렬 테두리 회전하기</title>
      <link>https://sklubmk.github.io/2021/06/30/cc6759e0995a/</link>
      <guid>https://sklubmk.github.io/2021/06/30/cc6759e0995a/</guid>
      <pubDate>Tue, 29 Jun 2021 17:00:33 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;행렬-테두리-회전하기&quot;&gt;&lt;a href=&quot;#행렬-테두리-회전하기&quot; class=&quot;headerlink&quot; title=&quot;행렬 테두리 회전하기&quot;&gt;&lt;/a&gt;행렬 테두리 회전하기&lt;/h1&gt;&lt;p&gt;Python3 &lt;/p&gt;
&lt;blockquote&gt;
&lt;h6 id=&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="행렬-테두리-회전하기"><a href="#행렬-테두리-회전하기" class="headerlink" title="행렬 테두리 회전하기"></a>행렬 테두리 회전하기</h1><p>Python3 </p><blockquote><h6 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h6><p>rows x columns 크기인 행렬이 있습니다. 행렬에는 1부터 rows x columns까지의 숫자가 한 줄씩 순서대로 적혀있습니다. 이 행렬에서 직사각형 모양의 범위를 여러 번 선택해, 테두리 부분에 있는 숫자들을 시계방향으로 회전시키려 합니다. 각 회전은 (x1, y1, x2, y2)인 정수 4개로 표현하며, 그 의미는 다음과 같습니다.</p><ul><li>  x1 행 y1 열부터 x2 행 y2 열까지의 영역에 해당하는 직사각형에서 테두리에 있는 숫자들을 한 칸씩 시계방향으로 회전합니다.</li></ul><p>다음은 6 x 6 크기 행렬의 예시입니다.</p><p><img src="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/ybm/4c3c0fab-11f4-43b6-b290-6f4017e9379f/grid_example.png" alt="grid_example.png"></p><p>이 행렬에 (2, 2, 5, 4) 회전을 적용하면, 아래 그림과 같이 2행 2열부터 5행 4열까지 영역의 테두리가 시계방향으로 회전합니다. 이때, 중앙의 15와 21이 있는 영역은 회전하지 않는 것을 주의하세요.</p><p><img src="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/ybm/962df137-5c71-4091-ad9f-8e322910c1ab/rotation_example.png" alt="rotation_example.png"></p><p>행렬의 세로 길이(행 개수) rows, 가로 길이(열 개수) columns, 그리고 회전들의 목록 queries가 주어질 때, 각 회전들을 배열에 적용한 뒤, 그 회전에 의해 위치가 바뀐 숫자들 중 가장 작은 숫자들을 순서대로 배열에 담아 return 하도록 solution 함수를 완성해주세요.</p><hr><h5 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h5><ul><li>  rows는 2 이상 100 이하인 자연수입니다.</li><li>  columns는 2 이상 100 이하인 자연수입니다.</li><li>  처음에 행렬에는 가로 방향으로 숫자가 1부터 하나씩 증가하면서 적혀있습니다.</li><li>  즉, 아무 회전도 하지 않았을 때, i 행 j 열에 있는 숫자는 ((i-1) x columns + j)입니다.</li><li>  queries의 행의 개수(회전의 개수)는 1 이상 10,000 이하입니다.</li><li>  queries의 각 행은 4개의 정수 [x1, y1, x2, y2]입니다.</li><li>  x1 행 y1 열부터 x2 행 y2 열까지 영역의 테두리를 시계방향으로 회전한다는 뜻입니다.</li><li>  1 ≤ x1 &lt; x2 ≤ rows, 1 ≤ y1 &lt; y2 ≤ columns입니다.</li><li>  모든 회전은 순서대로 이루어집니다.</li><li>  예를 들어, 두 번째 회전에 대한 답은 첫 번째 회전을 실행한 다음, 그 상태에서 두 번째 회전을 실행했을 때 이동한 숫자 중 최솟값을 구하면 됩니다.</li></ul><hr><h5 id="입출력-예시"><a href="#입출력-예시" class="headerlink" title="입출력 예시"></a>입출력 예시</h5><table><thead><tr><th>rows</th><th>columns</th><th>queries</th><th>result</th></tr></thead><tbody><tr><td><code>6</code></td><td><code>6</code></td><td><code>[[2,2,5,4],[3,3,6,6],[5,1,6,3]]</code></td><td><code>[8, 10, 25]</code></td></tr><tr><td><code>3</code></td><td><code>3</code></td><td><code>[[1,1,2,2],[1,2,2,3],[2,1,3,2],[2,2,3,3]]</code></td><td><code>[1, 1, 5, 3]</code></td></tr><tr><td><code>100</code></td><td><code>97</code></td><td><code>[[1,1,100,97]]</code></td><td><code>[1]</code></td></tr></tbody></table><hr><h5 id="입출력-예-설명"><a href="#입출력-예-설명" class="headerlink" title="입출력 예 설명"></a>입출력 예 설명</h5><p>입출력 예 #1</p><ul><li>  회전을 수행하는 과정을 그림으로 표현하면 다음과 같습니다.</li><li>  <img src="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/ybm/8c8cdd84-d0ec-4b9d-bdf7-f100d0098c5e/example1.png" alt="example1.png"></li></ul><p>입출력 예 #2</p><ul><li>  회전을 수행하는 과정을 그림으로 표현하면 다음과 같습니다.</li><li>  <img src="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/ybm/e3fce2bf-9da9-41e4-926a-5d19b4f31188/example2.png" alt="example2.png"></li></ul><p>입출력 예 #3</p><ul><li>  이 예시에서는 행렬의 테두리에 위치한 모든 칸들이 움직입니다. 따라서, 행렬의 테두리에 있는 수 중 가장 작은 숫자인 1이 바로 답이 됩니다.</li></ul></blockquote><br/><br/><h1 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h1><br/><h4 id="python"><a href="#python" class="headerlink" title="python"></a>python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span>(<span class="params">rows, columns, queries</span>):</span></span><br><span class="line">    square = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,rows*columns+<span class="number">1</span>)]</span><br><span class="line">    answer = []</span><br><span class="line">    <span class="keyword">for</span> [r1,c1,r2,c2] <span class="keyword">in</span> queries:</span><br><span class="line">        r1-=<span class="number">1</span>;c1-=<span class="number">1</span>;r2-=<span class="number">1</span>;c2-=<span class="number">1</span>;</span><br><span class="line">        min_ = <span class="number">10000</span></span><br><span class="line">        temp = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(c1+<span class="number">1</span>,c2+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> temp:</span><br><span class="line">                temp, square[columns*r1 + i] = (square[columns*r1 + i], temp)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp, square[columns*r1 + i] = (square[columns*r1 + i], square[columns*r1 + i - <span class="number">1</span>])</span><br><span class="line">            <span class="keyword">if</span> min_ &gt; temp: min_ = temp</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(r1+<span class="number">1</span>,r2+<span class="number">1</span>):</span><br><span class="line">            temp, square[columns*i + c2] = (square[columns*i + c2], temp)</span><br><span class="line">            <span class="keyword">if</span> min_ &gt; temp: min_ = temp    </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(c2-<span class="number">1</span>,c1-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">            temp, square[columns*r2 + i] = (square[columns*r2 + i], temp)</span><br><span class="line">            <span class="keyword">if</span> min_ &gt; temp: min_ = temp</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(r2-<span class="number">1</span>,r1-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">            temp, square[columns*i + c1] = (square[columns*i + c1], temp)</span><br><span class="line">            <span class="keyword">if</span> min_ &gt; temp: min_ = temp</span><br><span class="line">        </span><br><span class="line">        answer.append(min_)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><br/><br/><h1 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h1><br/><p>‘구현’ 능력이 필요한 문제다. </p><p>답에서 회전을 위해 4번의 for문을 사용한다.</p><p>각 회전때마다 현재(temp)값과 배열값을 비교하여 교환한다.</p><p>이를 통해 이전 값을 한 칸씩 앞으로 이동시킬 수 있다.</p>]]></content:encoded>
      
      
      <category domain="https://sklubmk.github.io/categories/TIL/">TIL</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/">프로그래머스</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/lv2/">lv2</category>
      
      
      <category domain="https://sklubmk.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sklubmk.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://sklubmk.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/">프로그래머스</category>
      
      <category domain="https://sklubmk.github.io/tags/%EA%B5%AC%ED%98%84/">구현</category>
      
      <category domain="https://sklubmk.github.io/tags/python/">python</category>
      
      <category domain="https://sklubmk.github.io/tags/lv2/">lv2</category>
      
      
      <comments>https://sklubmk.github.io/2021/06/30/cc6759e0995a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[프로그래머스] 가장 큰 수</title>
      <link>https://sklubmk.github.io/2021/06/30/5ffd2d08baf0/</link>
      <guid>https://sklubmk.github.io/2021/06/30/5ffd2d08baf0/</guid>
      <pubDate>Tue, 29 Jun 2021 17:00:33 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;가장-큰-수&quot;&gt;&lt;a href=&quot;#가장-큰-수&quot; class=&quot;headerlink&quot; title=&quot;가장 큰 수&quot;&gt;&lt;/a&gt;가장 큰 수&lt;/h1&gt;&lt;p&gt;JavaScript, Python&lt;/p&gt;
&lt;blockquote&gt;
&lt;h6 id=&quot;문제-설명&quot;&gt;&lt;a </description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="가장-큰-수"><a href="#가장-큰-수" class="headerlink" title="가장 큰 수"></a>가장 큰 수</h1><p>JavaScript, Python</p><blockquote><h6 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h6><p>0 또는 양의 정수가 주어졌을 때, 정수를 이어 붙여 만들 수 있는 가장 큰 수를 알아내 주세요.</p><p>예를 들어, 주어진 정수가 [6, 10, 2]라면 [6102, 6210, 1062, 1026, 2610, 2106]를 만들 수 있고, 이중 가장 큰 수는 6210입니다.</p><p>0 또는 양의 정수가 담긴 배열 numbers가 매개변수로 주어질 때, 순서를 재배치하여 만들 수 있는 가장 큰 수를 문자열로 바꾸어 return 하도록 solution 함수를 작성해주세요.</p><h5 id="제한-사항"><a href="#제한-사항" class="headerlink" title="제한 사항"></a>제한 사항</h5><ul><li>  numbers의 길이는 1 이상 100,000 이하입니다.</li><li>  numbers의 원소는 0 이상 1,000 이하입니다.</li><li>  정답이 너무 클 수 있으니 문자열로 바꾸어 return 합니다.</li></ul><h5 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h5><table><thead><tr><th>numbers</th><th>return</th></tr></thead><tbody><tr><td>[6, 10, 2]</td><td>“6210”</td></tr><tr><td>[3, 30, 34, 5, 9]</td><td>“9534330”</td></tr></tbody></table></blockquote><br/><h1 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h1><br/><h4 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">numbers</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> sortFunc = <span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ((b+<span class="string">&#x27;&#x27;</span>) + (a+<span class="string">&#x27;&#x27;</span>))*<span class="number">1</span> - ((a+<span class="string">&#x27;&#x27;</span>)+(b+<span class="string">&#x27;&#x27;</span>))*<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> answer = numbers.sort(sortFunc).join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> answer*<span class="number">1</span> ? answer : <span class="string">&quot;0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> cmp_to_key</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span>(<span class="params">numbers</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sort_func</span>(<span class="params">a,b</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(a+b) &gt; <span class="built_in">int</span>(b+a) :</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(<span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">sorted</span>([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> numbers],key=cmp_to_key(sort_func)))))</span><br></pre></td></tr></table></figure><br/><h1 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h1><br/><p>문자열 그대로 합친숫자(ex: 6+10 = 610)를 기준으로 정렬하여 풀었다.</p><p>자바스크립트에서는 정렬 기준 비교 함수를 직접 지정할 수 있지만, 파이썬에서는 기본함수에서 이를 제공하지 않는다.</p><p>따라서 <code>functools</code> 패키지의 <span style="color:#f46049">cpm_to_key</span>함수를 써야한다.</p><br/>]]></content:encoded>
      
      
      <category domain="https://sklubmk.github.io/categories/TIL/">TIL</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/">프로그래머스</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/lv2/">lv2</category>
      
      
      <category domain="https://sklubmk.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sklubmk.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://sklubmk.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/">프로그래머스</category>
      
      <category domain="https://sklubmk.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://sklubmk.github.io/tags/python/">python</category>
      
      <category domain="https://sklubmk.github.io/tags/lv2/">lv2</category>
      
      <category domain="https://sklubmk.github.io/tags/%EC%A0%95%EB%A0%AC/">정렬</category>
      
      
      <comments>https://sklubmk.github.io/2021/06/30/5ffd2d08baf0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[프로그래머스] 가장 큰 정사각형 찾기</title>
      <link>https://sklubmk.github.io/2021/06/30/25ebf566f834/</link>
      <guid>https://sklubmk.github.io/2021/06/30/25ebf566f834/</guid>
      <pubDate>Tue, 29 Jun 2021 17:00:33 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;가장-큰-정사각형-찾기&quot;&gt;&lt;a href=&quot;#가장-큰-정사각형-찾기&quot; class=&quot;headerlink&quot; title=&quot;가장 큰 정사각형 찾기&quot;&gt;&lt;/a&gt;가장 큰 정사각형 찾기&lt;/h1&gt;&lt;p&gt;JavaScript, Python&lt;/p&gt;
&lt;blockq</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="가장-큰-정사각형-찾기"><a href="#가장-큰-정사각형-찾기" class="headerlink" title="가장 큰 정사각형 찾기"></a>가장 큰 정사각형 찾기</h1><p>JavaScript, Python</p><blockquote><h6 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h6><p>1와 0로 채워진 표(board)가 있습니다. 표 1칸은 1 x 1 의 정사각형으로 이루어져 있습니다. 표에서 1로 이루어진 가장 큰 정사각형을 찾아 넓이를 return 하는 solution 함수를 완성해 주세요. (단, 정사각형이란 축에 평행한 정사각형을 말합니다.)</p><p>예를 들어</p><table><thead><tr><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>0</td><td>0</td><td>1</td><td>0</td></tr></tbody></table><p>가 있다면 가장 큰 정사각형은</p><table><thead><tr><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>0</td><td><code>1</code></td><td><code>1</code></td><td><code>1</code></td></tr><tr><td>1</td><td><code>1</code></td><td><code>1</code></td><td><code>1</code></td></tr><tr><td>1</td><td><code>1</code></td><td><code>1</code></td><td><code>1</code></td></tr><tr><td>0</td><td>0</td><td>1</td><td>0</td></tr></tbody></table><p>가 되며 넓이는 9가 되므로 9를 반환해 주면 됩니다.</p><h5 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h5><ul><li>  표(board)는 2차원 배열로 주어집니다.</li><li>  표(board)의 행(row)의 크기 : 1,000 이하의 자연수</li><li>  표(board)의 열(column)의 크기 : 1,000 이하의 자연수</li><li>  표(board)의 값은 1또는 0으로만 이루어져 있습니다.</li></ul><hr><h5 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h5><table><thead><tr><th>board</th><th>answer</th></tr></thead><tbody><tr><td>[[0,1,1,1],[1,1,1,1],[1,1,1,1],[0,0,1,0]]</td><td>9</td></tr><tr><td>[[0,0,1,1],[1,1,1,1]]</td><td>4</td></tr></tbody></table><h5 id="입출력-예-설명"><a href="#입출력-예-설명" class="headerlink" title="입출력 예 설명"></a>입출력 예 설명</h5><p>입출력 예 #1<br>위의 예시와 같습니다.</p><p>입출력 예 #2<br>| 0 | 0 | <code>1</code> | <code>1</code> |<br>| 1 | 1 | <code>1</code> | <code>1</code> |<br>로 가장 큰 정사각형의 넓이는 4가 되므로 4를 return합니다.</p></blockquote><br/><h1 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h1><br/><h3 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">board</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> answer = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    answer = board.filter(<span class="function">(<span class="params">b</span>)=&gt;</span>b.filter(<span class="function">(<span class="params">v</span>)=&gt;</span>v===<span class="number">1</span>).length).length &gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> y = <span class="number">1</span>; y &lt; board.length; y++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> x = <span class="number">1</span>; x &lt; board[<span class="number">0</span>].length; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[y][x] === <span class="number">1</span>) &#123;</span><br><span class="line">                board[y][x] = (<span class="built_in">Math</span>.min(board[y][x - <span class="number">1</span>], board[y - <span class="number">1</span>][x - <span class="number">1</span>], board[y - <span class="number">1</span>][x])) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (board[y][x] &gt; answer) &#123;</span><br><span class="line">                    answer = board[y][x];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> answer * answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span>(<span class="params">board</span>):</span></span><br><span class="line">    answer = <span class="number">0</span> <span class="keyword">if</span> <span class="built_in">sum</span>([<span class="built_in">sum</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> board]) == <span class="number">0</span> <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(board)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(board[i])):</span><br><span class="line">            <span class="keyword">if</span> board[i][j]:</span><br><span class="line">                board[i][j] = <span class="built_in">min</span>(board[i][j-<span class="number">1</span>],board[i-<span class="number">1</span>][j-<span class="number">1</span>],board[i-<span class="number">1</span>][j]) + <span class="number">1</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> board[i][j] &gt; answer:</span><br><span class="line">                    answer = board[i][j]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> answer ** <span class="number">2</span></span><br></pre></td></tr></table></figure><br/><h1 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h1><br/><p>배열의 정사각형 부분을 간략히 표현하기 위한 방법을 고민했다. </p><p>가장 단순하게 각 점마다 사각형을 확인해보는 함수는 O(N<sup>4</sup>)까지 효율성이 떨어졌기 때문에, 되도록 O(N<sup>2</sup>)을 이용하는 방법을 고민했다.</p><p>각 열 혹은 행의 합을 이용해서 풀이할 수 있는 방법이 있을까 생각해봤다(스도쿠). 그러나 각 라인 값의 합 만으로는 정사각형을 특정할 수 없었고 결국 배열을 다시 확인하는 작업이 수반되어야 했다.</p><p>그러던 중 탐색해 나아갈때마다 값을 누적하는 방식의 풀이를 접하게 되었고, 현재 탐색 점 기준 왼쪽 위로 2x2 사각형의 값을 누적하는 방식의 풀이법을 알게 되었다. 이 때, 3영역의 값 중 최소값을 불러오는데, 이는 사각형을 온전히 이루고 있는지 판단하기 위한 방법이다.</p><br/><h3 id="시작"><a href="#시작" class="headerlink" title="시작"></a>시작</h3><table border="0"> <tr>    <td>1</td>    <td>1</td>    <td>1</td> </tr> <tr>    <td>1</td>    <td>1</td>    <td>1</td> </tr> <tr>    <td>1</td>    <td>1</td>    <td>1</td> </tr></table><br/><h3 id="1단계-1-1"><a href="#1단계-1-1" class="headerlink" title="1단계 (1,1)"></a>1단계 (1,1)</h3><p>(1,1) -&gt; [ 상단 : 1 , 좌측 : 1 , 좌측 상단 : 1 ] 이므로 -&gt; 2</p><table border="0"> <tr>    <td>1</td>    <td>1</td>    <td>1</td> </tr> <tr>    <td>1</td>    <td style="color:red">2</td>    <td>1</td> </tr> <tr>    <td>1</td>    <td>1</td>    <td>1</td> </tr></table><br/><h3 id="2단계-1-2"><a href="#2단계-1-2" class="headerlink" title="2단계 (1,2)"></a>2단계 (1,2)</h3><p>(1,2) -&gt; [ 상단 : 1 ,좌측 : 1 ,좌측상단 : 1 ] 이므로 -&gt; 2</p><table border="0"> <tr>    <td>1</td>    <td>1</td>    <td>1</td> </tr> <tr>    <td>1</td>    <td>2</td>    <td style="color:red">2</td> </tr> <tr>    <td>1</td>    <td>1</td>    <td>1</td> </tr></table><br/><h3 id="3단계-2-1"><a href="#3단계-2-1" class="headerlink" title="3단계 (2,1)"></a>3단계 (2,1)</h3><p>(2,1) -&gt; [ 상단 : 1 ,좌측 : 1 ,좌측상단 : 1 ] 이므로 -&gt; 2</p><table border="0"> <tr>    <td>1</td>    <td>1</td>    <td>1</td> </tr> <tr>    <td>1</td>    <td>2</td>    <td>2</td> </tr> <tr>    <td>1</td>    <td style="color:red">2</td>    <td>1</td> </tr></table><br/><h3 id="4단계-2-2"><a href="#4단계-2-2" class="headerlink" title="4단계 (2,2)"></a>4단계 (2,2)</h3><p>(2,2) -&gt; [ 상단 : 2 ,좌측 : 2 ,좌측상단 : 2 ] 이므로 -&gt; 3</p><table border="0"> <tr>    <td>1</td>    <td>1</td>    <td>1</td> </tr> <tr>    <td>1</td>    <td>2</td>    <td>2</td> </tr> <tr>    <td>1</td>    <td>2</td>    <td style="color:red">3</td> </tr></table><br/><p>이 과정에서 탐색 값 중 0의 값이 포함되어 있다면 현재 값은 오직 1을 갖는다.</p><p>따라서 해당 방법으로 (i,j)가 온전한 사각형인지, 만약 그렇다면 얼만큼의 크기를 갖는지 알 수 있다.</p><br/>]]></content:encoded>
      
      
      <category domain="https://sklubmk.github.io/categories/TIL/">TIL</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/">프로그래머스</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/lv2/">lv2</category>
      
      
      <category domain="https://sklubmk.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sklubmk.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://sklubmk.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/">프로그래머스</category>
      
      <category domain="https://sklubmk.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://sklubmk.github.io/tags/python/">python</category>
      
      <category domain="https://sklubmk.github.io/tags/lv2/">lv2</category>
      
      <category domain="https://sklubmk.github.io/tags/DP/">DP</category>
      
      
      <comments>https://sklubmk.github.io/2021/06/30/25ebf566f834/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[프로그래머스] 예상 대진표</title>
      <link>https://sklubmk.github.io/2021/06/30/b37cff444ed0/</link>
      <guid>https://sklubmk.github.io/2021/06/30/b37cff444ed0/</guid>
      <pubDate>Tue, 29 Jun 2021 17:00:33 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;예상-대진표&quot;&gt;&lt;a href=&quot;#예상-대진표&quot; class=&quot;headerlink&quot; title=&quot;예상 대진표&quot;&gt;&lt;/a&gt;예상 대진표&lt;/h1&gt;&lt;p&gt;JavaScript, Python&lt;/p&gt;
&lt;blockquote&gt;
&lt;h6 id=&quot;문제-설명&quot;&gt;&lt;a </description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="예상-대진표"><a href="#예상-대진표" class="headerlink" title="예상 대진표"></a>예상 대진표</h1><p>JavaScript, Python</p><blockquote><h6 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h6><p>△△ 게임대회가 개최되었습니다. 이 대회는 N명이 참가하고, 토너먼트 형식으로 진행됩니다. N명의 참가자는 각각 1부터 N번을 차례대로 배정받습니다. 그리고, 1번↔2번, 3번↔4번, … , N-1번↔N번의 참가자끼리 게임을 진행합니다. 각 게임에서 이긴 사람은 다음 라운드에 진출할 수 있습니다. 이때, 다음 라운드에 진출할 참가자의 번호는 다시 1번부터 N/2번을 차례대로 배정받습니다. 만약 1번↔2번 끼리 겨루는 게임에서 2번이 승리했다면 다음 라운드에서 1번을 부여받고, 3번↔4번에서 겨루는 게임에서 3번이 승리했다면 다음 라운드에서 2번을 부여받게 됩니다. 게임은 최종 한 명이 남을 때까지 진행됩니다.</p><p>이때, 처음 라운드에서 A번을 가진 참가자는 경쟁자로 생각하는 B번 참가자와 몇 번째 라운드에서 만나는지 궁금해졌습니다. 게임 참가자 수 N, 참가자 번호 A, 경쟁자 번호 B가 함수 solution의 매개변수로 주어질 때, 처음 라운드에서 A번을 가진 참가자는 경쟁자로 생각하는 B번 참가자와 몇 번째 라운드에서 만나는지 return 하는 solution 함수를 완성해 주세요. 단, A번 참가자와 B번 참가자는 서로 붙게 되기 전까지 항상 이긴다고 가정합니다.</p><h5 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h5><ul><li>  N : 21 이상 220 이하인 자연수 (2의 지수 승으로 주어지므로 부전승은 발생하지 않습니다.)</li><li>  A, B : N 이하인 자연수 (단, A ≠ B 입니다.)</li></ul><hr><h5 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h5><table><thead><tr><th>N</th><th>A</th><th>B</th><th>answer</th></tr></thead><tbody><tr><td>8</td><td>4</td><td>7</td><td>3</td></tr></tbody></table><h5 id="입출력-예-설명"><a href="#입출력-예-설명" class="headerlink" title="입출력 예 설명"></a>입출력 예 설명</h5><p>입출력 예 #1<br>첫 번째 라운드에서 4번 참가자는 3번 참가자와 붙게 되고, 7번 참가자는 8번 참가자와 붙게 됩니다. 항상 이긴다고 가정했으므로 4번 참가자는 다음 라운드에서 2번이 되고, 7번 참가자는 4번이 됩니다. 두 번째 라운드에서 2번은 1번과 붙게 되고, 4번은 3번과 붙게 됩니다. 항상 이긴다고 가정했으므로 2번은 다음 라운드에서 1번이 되고, 4번은 2번이 됩니다. 세 번째 라운드에서 1번과 2번으로 두 참가자가 붙게 되므로 3을 return 하면 됩니다.</p></blockquote><br/><br/><h1 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h1><br/><h4 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">n,a,b</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">let</span> answer = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(a !== b)&#123;</span><br><span class="line">        a = <span class="built_in">Math</span>.ceil(a/<span class="number">2</span>)</span><br><span class="line">        b = <span class="built_in">Math</span>.ceil(b/<span class="number">2</span>)</span><br><span class="line">        answer++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> answer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><h4 id="python"><a href="#python" class="headerlink" title="python"></a>python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span>(<span class="params">n,a,b</span>):</span></span><br><span class="line">    answer = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> a != b:</span><br><span class="line">        answer += <span class="number">1</span></span><br><span class="line">        a, b = ((a+<span class="number">1</span>) // <span class="number">2</span>, (b+<span class="number">1</span>) // <span class="number">2</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><br/><br/><h1 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h1><br/><p>math의 ceil함수로 올림을 사용하면 더 편리하지만, 패키지의 사용을 최소화 하려 노력하고 있기 때문에 a 와 b에 1을 더해서 내부 내림 연산 (//)을 사용했다.</p><br/><br/><p>비트를 이용한 풀이도 존재한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span>(<span class="params">n,a,b</span>):</span> </span><br><span class="line">    <span class="keyword">return</span> ((a-<span class="number">1</span>)^(b-<span class="number">1</span>)).bit_length()</span><br></pre></td></tr></table></figure><p>bit_length 함수는 정수를 2진법으로 표현할 때 필요한 비트 수를 반환한다.</p><p>즉, 두 정수 a-1,b-1이 xor 연산을 통해 서로의 최대 자리수 차이를 구하고 이 값의 표현에 필요한 비트 수를 통해 총 필요한 경기수를 알 수 있다.</p><br/><br/><p>가깝게 대진표가 잡힌다면 적은 경기 수를, 대진표가 서로 멀리 잡힌다면 비교적 많은 경기 수를 필요로 하게 된다.</p><br/><p>a = 1, b = 3 이라면<br>(a-1)^(b-1) = 00 ^ 10 = 10 이고,<br>이진법 10의 필요 비트 수는 2 이므로 2번의 경기를 통해 만날 수 있다.</p><p>a = 1, b = 8 이라면<br>(a-1)^(b-1) = 0000 ^ 1000 = 1000 이고,<br>이진법 1000의 필요 비트 수는 4 이므로 총 4번의 경기를 통해 만날 수 있다.</p>]]></content:encoded>
      
      
      <category domain="https://sklubmk.github.io/categories/TIL/">TIL</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/">프로그래머스</category>
      
      <category domain="https://sklubmk.github.io/categories/TIL/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/lv2/">lv2</category>
      
      
      <category domain="https://sklubmk.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sklubmk.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://sklubmk.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/">프로그래머스</category>
      
      <category domain="https://sklubmk.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://sklubmk.github.io/tags/python/">python</category>
      
      <category domain="https://sklubmk.github.io/tags/lv2/">lv2</category>
      
      <category domain="https://sklubmk.github.io/tags/bit/">bit</category>
      
      
      <comments>https://sklubmk.github.io/2021/06/30/b37cff444ed0/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
